+++++++++++++++++++++++++++++++++++++++++++++
++++++++++       REPORT INFO       ++++++++++
+++++++++++++++++++++++++++++++++++++++++++++


SUMMARY
===============================================
|     Property     |          Value           |
===============================================
| User             | runner                   |
| Host             | b77f5a8f55cb             |
| Tool             | Riviera-PRO 2022.04      |
| Report file      | /home/runner/sbm_cov.txt |
| Report date      | 2023-09-30 05:06         |
| Report arguments | -verbose                 |
| Input file       | simulation session       |
| Input file date  | simulation session       |
| Number of tests  | 1                        |
===============================================


TEST DETAILS
==============================================
| Property |              Value              |
==============================================
| Test     | work.acdb:work                  |
| Status   | Ok                              |
| Args     | asim +access+r -dbg -acdb       |
| Simtime  | 998910 ns                       |
| Cputime  | 5.350 s                         |
| Seed     | 1                               |
| Date     | 2023-09-30 05:06                |
| User     | runner                          |
| Host     | b77f5a8f55cb                    |
| Host os  | Linux64                         |
| Tool     | Riviera-PRO 2022.04 (simulator) |
==============================================


+++++++++++++++++++++++++++++++++++++++++++++
++++++++++     DESIGN HIERARCHY    ++++++++++
+++++++++++++++++++++++++++++++++++++++++++++


CUMULATIVE SUMMARY
=============================================
|    Coverage Type    | Weight | Hits/Total |
=============================================
| Statement Coverage  |      1 |    81.949% |
|---------------------|--------|------------|
| Statements          |        |  227 / 277 |
| Subprograms         |        |    26 / 52 |
=============================================
| Branch Coverage     |      1 |    66.250% |
|---------------------|--------|------------|
| Branch paths        |        |    53 / 80 |
| Branches            |        |    24 / 39 |
=============================================
| Covergroup Coverage |      1 |   100.000% |
|---------------------|--------|------------|
| Types               |        |      1 / 1 |
=============================================
| Assertion Coverage  |      1 |   100.000% |
|---------------------|--------|------------|
| Assertions          |        |      3 / 3 |
| Covers              |        |      2 / 2 |
=============================================
CUMULATIVE INSTANCE-BASED COVERAGE: 87.049%
COVERED INSTANCES: 5 / 13
FILES: 10


INSTANCE - /tb_top : work.tb_top


    SUMMARY
    =========================================================================
    |   Coverage Type    | Weight | Local Hits/Total | Recursive Hits/Total |
    =========================================================================
    | Statement Coverage |      1 |         100.000% |             100.000% |
    |--------------------|--------|------------------|----------------------|
    | Statements         |        |            6 / 6 |            107 / 107 |
    | Subprograms        |        |            0 / 0 |                0 / 0 |
    =========================================================================
    | Branch Coverage    |      1 |      No branches |             100.000% |
    |--------------------|--------|------------------|----------------------|
    | Branch paths       |        |            0 / 0 |              42 / 42 |
    | Branches           |        |            0 / 0 |              20 / 20 |
    =========================================================================
    | Assertion Coverage |      1 |    No assertions |             100.000% |
    |--------------------|--------|------------------|----------------------|
    | Assertions         |        |            0 / 0 |                1 / 1 |
    | Covers             |        |            0 / 0 |                2 / 2 |
    =========================================================================
    WEIGHTED AVERAGE LOCAL: 100.000%
    WEIGHTED AVERAGE RECURSIVE: 100.000%


    STATEMENT COVERAGE
    ================================================================================================================
    | Line |  Hits  |                                     Source: testbench.sv                                     |
    |------|--------|----------------------------------------------------------------------------------------------|
    | 42   |        |     //Registers the Interface in the configuration block                                     |
    | 43   |        |     //so that other blocks can use it                                                        |
    | 44   |   1    |     uvm_resource_db#(virtual uart_intf)::set(.scope("ifs"), .name("uart_intf"), .val(intf)); |
    | 45   |        |                                                                                              |
    | 46   |        |     //Executes the test                                                                      |
    | 47   |   1    |     run_test("test");                                                                        |
    | 48   |        |   end                                                                                        |
    | 49   |        |                                                                                              |
    | 50   |        |   //Variable initialization                                                                  |
    | 51   |        |   initial begin                                                                              |
    | 52   |   1    |     intf.i_clk = 1'b1;                                                                       |
    | 53   |        |     // Dump waves                                                                            |
    | 54   |   1    |     $dumpfile("dump.vcd");                                                                   |
    | 55   |   1    |     $dumpvars(0, tb_top);                                                                    |
    | 56   |        |   end                                                                                        |
    | 57   |        |                                                                                              |
    | 58   |        |   //Clock generation                                                                         |
    | 59   |        |   always begin                                                                               |
    | 60   | 199782 |     #5 intf.i_clk = ~intf.i_clk;                                                             |
    | 61   |        |   end                                                                                        |
    | 62   |        |                                                                                              |
    ================================================================================================================


INSTANCE - /tb_top/dut : work.uart_top


    SUMMARY
    =========================================================================
    |   Coverage Type    | Weight | Local Hits/Total | Recursive Hits/Total |
    =========================================================================
    | Statement Coverage |      1 |         100.000% |             100.000% |
    |--------------------|--------|------------------|----------------------|
    | Statements         |        |            3 / 3 |            101 / 101 |
    | Subprograms        |        |            0 / 0 |                0 / 0 |
    =========================================================================
    | Branch Coverage    |      1 |         100.000% |             100.000% |
    |--------------------|--------|------------------|----------------------|
    | Branch paths       |        |            2 / 2 |              42 / 42 |
    | Branches           |        |            1 / 1 |              20 / 20 |
    =========================================================================
    | Assertion Coverage |      1 |    No assertions |             100.000% |
    |--------------------|--------|------------------|----------------------|
    | Assertions         |        |            0 / 0 |                1 / 1 |
    | Covers             |        |            0 / 0 |                2 / 2 |
    =========================================================================
    WEIGHTED AVERAGE LOCAL: 100.000%
    WEIGHTED AVERAGE RECURSIVE: 100.000%


    STATEMENT COVERAGE
    ========================================================================
    | Line | Hits  |                   Source: design.sv                   |
    |------|-------|-------------------------------------------------------|
    | 382  |       |     // for uvm verification purposes                  |
    | 383  |       |     always_ff @(posedge i_clk) begin : o_rx_busy_prev |
    | 384  | 99892 |         if(i_rst) begin                               |
    | 385  |   1   |             f_rx_busy_prev <= 0;                      |
    | 386  |       |         end else begin                                |
    | 387  | 99891 |             f_rx_busy_prev <= o_rx_busy;              |
    | 388  |       |         end                                           |
    | 389  |       |     end                                               |
    ========================================================================


    BRANCH COVERAGE
    ============================
    |    Source: design.sv     |
    ============================
    | Branch/Line      | Hits  |
    ============================
    | IF branch#384#1# |   2/2 |
    |     if_branch    |     1 |
    |     else_branch  | 99891 |
    ============================


INSTANCE - /tb_top/dut/wb_regs_inst : work.wb_regs


    SUMMARY
    ============================================
    |   Coverage Type    | Weight | Hits/Total |
    ============================================
    | Statement Coverage |      1 |   100.000% |
    |--------------------|--------|------------|
    | Statements         |        |    15 / 15 |
    | Subprograms        |        |      0 / 0 |
    ============================================
    | Branch Coverage    |      1 |   100.000% |
    |--------------------|--------|------------|
    | Branch paths       |        |      6 / 6 |
    | Branches           |        |      3 / 3 |
    ============================================
    WEIGHTED AVERAGE LOCAL: 100.000%


    STATEMENT COVERAGE
    ==========================================================================
    | Line | Hits  |                    Source: design.sv                    |
    |------|-------|---------------------------------------------------------|
    | 58   |       |                                                         |
    | 59   |       |     always_ff @(posedge i_clk) begin : manage_inf_regs  |
    | 60   | 99892 |         if(i_rst) begin                                 |
    | 61   |   1   |             w_tx_reg <= 0;                              |
    | 62   |   1   |             o_ack <= 1'b0;                              |
    | 63   |   1   |             o_tx_en <= 1'b0;                            |
    | 64   |   1   |             o_data_valid <= 1'b0;                       |
    | 65   |       |         end else begin                                  |
    | 66   | 99891 |             o_ack <= i_stb;                             |
    | 67   | 99891 |             o_tx_en <= 1'b0;                            |
    | 68   | 99891 |             o_data_valid <= 1'b0;                       |
    | 69   |       |                                                         |
    | 70   | 99891 |             if (i_we && i_stb && i_addr == 0) begin     |
    | 71   |  64   |                 w_tx_reg <= i_data;                     |
    | 72   |  64   |                 o_tx_en <= 1'b1;                        |
    | 73   | 99827 |             end else if (!i_we && i_stb && i_addr == 1) |
    | 74   |  69   |                 o_data <= i_uart_rd_data;               |
    | 75   | 99891 |                 o_data_valid <= 1'b1;                   |
    | 76   |       |         end                                             |
    | 77   |       |     end                                                 |
    | 78   |       |                                                         |
    | 79   |  66   |     assign o_tx_reg = w_tx_reg;                         |
    | 80   |       |                                                         |
    | 81   |       | endmodule : wb_regs                                     |
    ==========================================================================


    BRANCH COVERAGE
    ================================
    |      Source: design.sv       |
    ================================
    | Branch/Line          | Hits  |
    ================================
    | IF branch#60#1#      |   2/2 |
    |     if_branch        |     1 |
    |     else_branch      | 99891 |
    |----------------------|-------|
    | IF branch#70#1#      |   2/2 |
    |     if_branch        |    64 |
    |     else_branch      | 99827 |
    |----------------------|-------|
    | IF branch#73#1#      |   2/2 |
    |     if_branch        |    69 |
    |     all_false_branch | 99758 |
    ================================


INSTANCE - /tb_top/dut/uart_inst : work.uart


    SUMMARY
    =========================================================================
    |   Coverage Type    | Weight | Local Hits/Total | Recursive Hits/Total |
    =========================================================================
    | Statement Coverage |      1 |         100.000% |             100.000% |
    |--------------------|--------|------------------|----------------------|
    | Statements         |        |          81 / 81 |              83 / 83 |
    | Subprograms        |        |            0 / 0 |                0 / 0 |
    =========================================================================
    | Branch Coverage    |      1 |         100.000% |             100.000% |
    |--------------------|--------|------------------|----------------------|
    | Branch paths       |        |          34 / 34 |              34 / 34 |
    | Branches           |        |          16 / 16 |              16 / 16 |
    =========================================================================
    | Assertion Coverage |      1 |         100.000% |             100.000% |
    |--------------------|--------|------------------|----------------------|
    | Assertions         |        |            1 / 1 |                1 / 1 |
    | Covers             |        |            2 / 2 |                2 / 2 |
    =========================================================================
    WEIGHTED AVERAGE LOCAL: 100.000%
    WEIGHTED AVERAGE RECURSIVE: 100.000%


    STATEMENT COVERAGE
    ======================================================================================================================
    | Line | Hits  |                                          Source: design.sv                                          |
    |------|-------|-----------------------------------------------------------------------------------------------------|
    | 149  |       |                                                                                                     |
    | 150  |       |                                                                                                     |
    | 151  |  66   |     assign o_data = w_rx_data;                                                                      |
    | 152  |       |                                                                                                     |
    | 153  |       |     always_ff @(posedge i_clk) begin : gen_pulse                                                    |
    | 154  | 99892 |         if(i_rst) begin                                                                             |
    | 155  |   1   |             cnt_baud <= 0;                                                                          |
    | 156  |   1   |             r_baud_pulse <= 1'b0;                                                                   |
    | 157  |   1   |             cnt_oversample <= 0;                                                                    |
    | 158  |   1   |             r_oversample_pulse <= 1'b0;                                                             |
    | 159  |       |         end else begin                                                                              |
    | 160  | 99891 |             if ($size(RangeBaud)'(cnt_baud) < RangeBaud) begin                                      |
    | 161  | 99250 |                 cnt_baud <= cnt_baud + 1;                                                           |
    | 162  | 99250 |                 r_baud_pulse <= 1'b0;                                                               |
    | 163  |       |             end else begin                                                                          |
    | 164  |  641  |                 cnt_baud <= 0;                                                                      |
    | 165  |  641  |                 r_baud_pulse <= 1'b1;                                                               |
    | 166  |  641  |                 cnt_oversample <= 0;                                                                |
    | 167  |       |             end                                                                                     |
    | 168  |       |                                                                                                     |
    | 169  | 99891 |             if ($size(RangeOversample)'(cnt_oversample) < RangeOversample) begin                    |
    | 170  | 88792 |                 cnt_oversample <= cnt_oversample + 1;                                               |
    | 171  | 88792 |                 r_oversample_pulse <= 1'b0;                                                         |
    | 172  |       |             end else begin                                                                          |
    | 173  | 11099 |                 cnt_oversample <= 0;                                                                |
    | 174  | 11099 |                 r_oversample_pulse <= 1'b1;                                                         |
    | 175  |       |             end                                                                                     |
    | 176  |       |         end                                                                                         |
    | 177  |       |     end                                                                                             |
    | 178  |       |                                                                                                     |
    | 179  |       |     always_ff @(posedge i_clk) begin : TX_FSM                                                       |
    | 180  | 99892 |         if(i_rst) begin                                                                             |
    | 181  |   1   |             o_tx_busy <= 1'b0;                                                                      |
    | 182  |   1   |             state_tx <= IDLE_TX;                                                                    |
    | 183  |   1   |             cnt_digits_sent <= 0;                                                                   |
    | 184  |   1   |             r_tx_data <= 0;                                                                         |
    | 185  |   1   |             o_tx <= 1'b1;                                                                           |
    | 186  |       |         end else begin                                                                              |
    | 187  | 99891 |             case (state_tx)                                                                         |
    | 188  |       |                 IDLE_TX : begin                                                                     |
    | 189  | 12934 |                     o_tx <= 1'b1;                                                                   |
    | 190  | 12934 |                     if (i_tx_en) begin                                                              |
    | 191  |  64   |                         r_tx_data <= {1'b1, w_tx_parity, i_data, 1'b0};                             |
    | 192  |  64   |                         state_tx <= TRANSMIT;                                                       |
    | 193  |  64   |                         cnt_digits_sent <= 0;                                                       |
    | 194  |  64   |                         o_tx_busy <= 1'b1;                                                          |
    | 195  |       |                     end                                                                             |
    | 196  |       |                 end                                                                                 |
    | 197  |       |                 TRANSMIT :  begin                                                                   |
    | 198  | 86956 |                     if (r_baud_pulse) begin                                                         |
    | 199  |  576  |                         o_tx <= r_tx_data[0];                                                       |
    | 200  |  576  |                         o_tx_busy <= 1'b1;                                                          |
    | 201  |  576  |                         if ($size(G_WORD_WIDTH)'(cnt_digits_sent) < G_WORD_WIDTH + 2) begin         |
    | 202  |  512  |                             r_tx_data <= {1'b1, r_tx_data[$high(r_tx_data): 1]};                    |
    | 203  |  512  |                             cnt_digits_sent <= cnt_digits_sent + 1;                                 |
    | 204  |  512  |                             state_tx <= TRANSMIT;                                                   |
    | 205  |       |                         end else begin                                                              |
    | 206  |  64   |                             cnt_digits_sent <= 0;                                                   |
    | 207  |  64   |                             state_tx <= IDLE_TX;                                                    |
    | 208  |  64   |                             o_tx_busy <= 1'b0;                                                      |
    | 209  |  64   |                             o_tx <= 1'b1;                                                           |
    | 210  |       |                         end                                                                         |
    | 211  |       |                     end                                                                             |
    | 212  |       |                 end                                                                                 |
    | 213  |       |                 default : begin                                                                     |
    | 214  |   1   |                     o_tx_busy <= 1'b0;                                                              |
    | 215  |   1   |                     o_tx <= 1'b1;                                                                   |
    | 216  |   1   |                     state_tx <= IDLE_TX;                                                            |
    | 217  |       |                 end                                                                                 |
    | 218  |       |             endcase                                                                                 |
    | 219  |       |         end                                                                                         |
    | 220  |       |     end                                                                                             |
    | 221  |       |                                                                                                     |
    | 222  |       |     parity #(.G_WIDTH(G_WORD_WIDTH),.G_PARITY_TYPE(G_PARITY_TYPE)) parity_gen (                     |
    | 223  |       |         .i_data(i_data),                                                                            |
    | 224  |       |         .o_parity_bit(w_tx_parity)                                                                  |
    | 225  |       |     );                                                                                              |
    | 226  |       |                                                                                                     |
    | 227  |       |     always_ff @(posedge i_clk) begin : RX_FSM                                                       |
    | 228  | 99892 |         if(i_rst) begin                                                                             |
    | 229  |   1   |             o_rx_busy <= 1'b0;                                                                      |
    | 230  |   1   |             o_rx_error <= 1'b0;                                                                     |
    | 231  |   1   |             w_rx_data <= 0;                                                                         |
    | 232  |   1   |             r_rx_data <= 0;                                                                         |
    | 233  |   1   |             state_rx <= IDLE_RX;                                                                    |
    | 234  |   1   |             cnt_digits_received <= 0;                                                               |
    | 235  |   1   |             cnt_oversample_pulses <= 0;                                                             |
    | 236  |       |         end else begin                                                                              |
    | 237  | 99891 |             case (state_rx)                                                                         |
    | 238  |       |                 IDLE_RX : begin                                                                     |
    | 239  | 11762 |                     if (r_oversample_pulse) begin                                                   |
    | 240  | 1306  |                         if ( !i_rx) begin                                                           |
    | 241  |  512  |                             if ($size(G_OVERSAMPLE)'(cnt_oversample_pulses) <                       |
    | 242  |       |                             G_OVERSAMPLE/2 - 1) begin                                               |
    | 243  |  448  |                                 cnt_oversample_pulses <= cnt_oversample_pulses + 1;                 |
    | 244  |  448  |                                 state_rx <= IDLE_RX;                                                |
    | 245  |       |                             end else begin                                                          |
    | 246  |  64   |                                 o_rx_busy <= 1'b1;                                                  |
    | 247  |  64   |                                 cnt_oversample_pulses <= 0;                                         |
    | 248  |  64   |                                 state_rx <= RECEIVE;                                                |
    | 249  |       |                             end                                                                     |
    | 250  |       |                         end else begin                                                              |
    | 251  |  794  |                             o_rx_busy <= 1'b0;                                                      |
    | 252  |  794  |                             o_rx_error <= 1'b0;                                                     |
    | 253  |  794  |                             r_rx_data <= 0;                                                         |
    | 254  |       |                         end                                                                         |
    | 255  |       |                     end                                                                             |
    | 256  |       |                 end                                                                                 |
    | 257  |       |                 RECEIVE : begin                                                                     |
    | 258  | 88128 |                     o_rx_busy <= 1'b1;                                                              |
    | 259  |       |                                                                                                     |
    | 260  | 88128 |                     if (r_oversample_pulse) begin                                                   |
    | 261  | 9792  |                         if ($size(G_OVERSAMPLE)'(cnt_oversample_pulses) < G_OVERSAMPLE) begin       |
    | 262  | 9216  |                             cnt_oversample_pulses <= cnt_oversample_pulses + 1;                     |
    | 263  |       |                         end else begin                                                              |
    | 264  |  576  |                             cnt_oversample_pulses <= 0;                                             |
    | 265  |  576  |                             if ($size(G_WORD_WIDTH)'(cnt_digits_received) < G_WORD_WIDTH + 2) begin |
    | 266  |  512  |                                 r_rx_data <= {i_rx, r_rx_data[$high(r_rx_data) : 1]};               |
    | 267  |  512  |                                 cnt_digits_received <= cnt_digits_received + 1;                     |
    | 268  |  512  |                                 state_rx <= RECEIVE;                                                |
    | 269  |       |                             end else begin                                                          |
    | 270  |  64   |                                 state_rx <= IDLE_RX;                                                |
    | 271  |  64   |                                 cnt_digits_received <= 0;                                           |
    | 272  |  64   |                                 o_rx_busy <= 1'b0;                                                  |
    | 273  |  64   |                                 w_rx_data <= r_rx_data[$high(r_rx_data) -2 : 0];                    |
    | 274  |       |                               // coverage off (can't find how)                                      |
    | 275  |       |                                 if ( !r_rx_data[$high(r_rx_data)])                                  |
    | 276  |       |                                     o_rx_error <= 1'b1;                                             |
    | 277  |       |                                 if ( ^({r_rx_data[$high(r_rx_data) - 2 : 0], w_tx_parity})          |
    | 278  |       |                                     != G_PARITY_TYPE)                                               |
    | 279  |       |                                     o_rx_error <= 1'b1;                                             |
    | 280  |       |                               // coverage on                                                        |
    | 281  |       |                             end                                                                     |
    | 282  |       |                         end                                                                         |
    | 283  |       |                     end                                                                             |
    | 284  |       |                 end                                                                                 |
    | 285  |       |                 default : begin                                                                     |
    | 286  |   1   |                     o_rx_busy <= 1'b1;                                                              |
    | 287  |   1   |                     o_rx_error <= 1'b0;                                                             |
    | 288  |   1   |                     w_rx_data <= 0;                                                                 |
    | 289  |   1   |                     state_rx <= IDLE_RX;                                                            |
    | 290  |       |                 end                                                                                 |
    | 291  |       |             endcase                                                                                 |
    ======================================================================================================================


    BRANCH COVERAGE
    ================================
    |      Source: design.sv       |
    ================================
    | Branch/Line          | Hits  |
    ================================
    | IF branch#154#1#     |   2/2 |
    |     if_branch        |     1 |
    |     else_branch      | 99891 |
    |----------------------|-------|
    | IF branch#160#1#     |   2/2 |
    |     if_branch        | 99250 |
    |     else_branch      |   641 |
    |----------------------|-------|
    | IF branch#169#1#     |   2/2 |
    |     if_branch        | 88792 |
    |     else_branch      | 11099 |
    |----------------------|-------|
    | IF branch#180#1#     |   2/2 |
    |     if_branch        |     1 |
    |     else_branch      | 99891 |
    |----------------------|-------|
    | CASE branch#187#1#   |   3/3 |
    |     true#188#1#      | 12934 |
    |     true#197#1#      | 86956 |
    |     true#213#1#      |     1 |
    |----------------------|-------|
    | IF branch#190#1#     |   2/2 |
    |     if_branch        |    64 |
    |     all_false_branch | 12870 |
    |----------------------|-------|
    | IF branch#198#1#     |   2/2 |
    |     if_branch        |   576 |
    |     all_false_branch | 86380 |
    |----------------------|-------|
    | IF branch#201#1#     |   2/2 |
    |     if_branch        |   512 |
    |     else_branch      |    64 |
    |----------------------|-------|
    | IF branch#228#1#     |   2/2 |
    |     if_branch        |     1 |
    |     else_branch      | 99891 |
    |----------------------|-------|
    | CASE branch#237#1#   |   3/3 |
    |     true#238#1#      | 11762 |
    |     true#257#1#      | 88128 |
    |     true#285#1#      |     1 |
    |----------------------|-------|
    | IF branch#239#1#     |   2/2 |
    |     if_branch        |  1306 |
    |     all_false_branch | 10456 |
    |----------------------|-------|
    | IF branch#240#1#     |   2/2 |
    |     if_branch        |   512 |
    |     else_branch      |   794 |
    |----------------------|-------|
    | IF branch#241#1#     |   2/2 |
    |     if_branch        |   448 |
    |     else_branch      |    64 |
    |----------------------|-------|
    | IF branch#260#1#     |   2/2 |
    |     if_branch        |  9792 |
    |     all_false_branch | 78336 |
    |----------------------|-------|
    | IF branch#261#1#     |   2/2 |
    |     if_branch        |  9216 |
    |     else_branch      |   576 |
    |----------------------|-------|
    | IF branch#265#1#     |   2/2 |
    |     if_branch        |   512 |
    |     else_branch      |    64 |
    ================================


    ASSERTION COVERAGE
    =====================================================
    |      Name      |     Source     | Failed | Passed |
    |----------------|----------------|--------|--------|
    | check_rx_error | design.sv(295) |      0 |      2 |
    =====================================================


    COVER COVERAGE
    ===========================================
    |      Name      |     Source     | Hits  |
    |----------------|----------------|-------|
    | cover_state_TX | design.sv(296) |    64 |
    | cover_state_RX | design.sv(297) | 11436 |
    ===========================================


INSTANCE - /tb_top/dut/uart_inst/parity_gen : work.parity


    SUMMARY
    ============================================
    |   Coverage Type    | Weight | Hits/Total |
    ============================================
    | Statement Coverage |      1 |   100.000% |
    |--------------------|--------|------------|
    | Statements         |        |      2 / 2 |
    | Subprograms        |        |      0 / 0 |
    ============================================
    WEIGHTED AVERAGE LOCAL: 100.000%


    STATEMENT COVERAGE
    =====================================================================
    | Line | Hits |                  Source: design.sv                  |
    |------|------|-----------------------------------------------------|
    | 16   |      |     always_comb begin : calc_parity                 |
    | 17   |      |         logic data_parity;                          |
    | 18   |  66  |         data_parity = ^(i_data);                    |
    | 19   |  66  |         o_parity_bit = G_PARITY_TYPE ^ data_parity; |
    | 20   |      |     end                                             |
    | 21   |      |                                                     |
    =====================================================================


CLASS - /\package testbench_pkg\/rand_sequence : work.testbench_pkg/\testbench_pkg rand_sequence \


    SUMMARY
    =============================================
    |    Coverage Type    | Weight | Hits/Total |
    =============================================
    | Statement Coverage  |      1 |    46.875% |
    |---------------------|--------|------------|
    | Statements          |        |    15 / 32 |
    | Subprograms         |        |      3 / 8 |
    =============================================
    | Branch Coverage     |      1 |     0.000% |
    |---------------------|--------|------------|
    | Branch paths        |        |     0 / 12 |
    | Branches            |        |      0 / 6 |
    =============================================
    | Covergroup Coverage |      1 |   100.000% |
    |---------------------|--------|------------|
    | Types               |        |      1 / 1 |
    =============================================
    | Assertion Coverage  |      1 |   100.000% |
    |---------------------|--------|------------|
    | Assertions          |        |      2 / 2 |
    =============================================
    WEIGHTED AVERAGE LOCAL: 61.718%


    STATEMENT COVERAGE
    ===========================================================================================================================================================================
    | Line |                           Hits                            |                                         Source: sequence.sv                                          |
    |------|-----------------------------------------------------------|------------------------------------------------------------------------------------------------------|
    | 1    |                                                           | import pkg::*;                                                                                       |
    | 2    |                                                           | class rand_sequence extends uvm_sequence;                                                            |
    | 3    | UNR,UNR,UNR,UNR,UNR,UNR,1,UNR,UNR,UNR,UNR,UNR,UNR,UNR,UNR |   `uvm_object_utils(rand_sequence)                                                                   |
    | 4    |                                                           |                                                                                                      |
    | 5    |                                                           |   sequence_item #(G_WORD_WIDTH) sa_tx;                                                               |
    | 6    |                                                           |   covergroup cg;                                                                                     |
    | 7    |                                                           |     option.per_instance = 1;                                                                         |
    | 8    |                                                           |     data:   coverpoint sa_tx.i_data{                                                                 |
    | 9    |                                                           |       bins range_data[] = {[0:$]};                                                                   |
    | 10   |                                                           |     }                                                                                                |
    | 11   |                                                           |   endgroup: cg                                                                                       |
    | 12   |                                                           |                                                                                                      |
    | 13   |                                                           |   function new(string name = "");                                                                    |
    | 14   |                             1                             |     super.new(name);                                                                                 |
    | 15   |                             1                             |     cg = new();                                                                                      |
    | 16   |                                                           |   endfunction                                                                                        |
    | 17   |                                                           |                                                                                                      |
    | 18   |                                                           |   task body();                                                                                       |
    | 19   |                                                           |     real cvg = 0;                                                                                    |
    | 20   |                                                           |                                                                                                      |
    | 21   |                           1,64                            |     while(cg.get_coverage != 100.0) begin                                                            |
    | 22   |                            64                             |       sa_tx = sequence_item #(G_WORD_WIDTH)::type_id::create("sa_tx");                               |
    | 23   |                                                           |                                                                                                      |
    | 24   |                            64                             |       cvg = cg.get_coverage();                                                                       |
    | 25   |                            64                             |       assert(sa_tx.randomize());                                                                     |
    | 26   |                            64                             |       cg.sample();                                                                                   |
    | 27   |                          64,187                           |       while (cg.get_coverage() == cvg) begin                                                         |
    | 28   |                            187                            |         assert(sa_tx.randomize());                                                                   |
    | 29   |                            187                            |         cg.sample();                                                                                 |
    | 30   |                                                           |       end                                                                                            |
    | 31   |                            64                             |       start_item(sa_tx);                                                                             |
    | 32   |                            64                             |       finish_item(sa_tx);                                                                            |
    | 33   |                                                           | //       `uvm_info(get_type_name(), $sformatf("Current Coverage = %0f", cg.get_coverage()), UVM_LOW) |
    | 34   |                                                           |     end                                                                                              |
    | 35   |                                                           |   endtask                                                                                            |
    | 36   |                                                           |                                                                                                      |
    | 37   |                                                           |   function void report_phase(uvm_phase phase);                                                       |
    | 38   |                        UNR,UNR,UNR                        |     `uvm_info(get_type_name(), $sformatf("Current Coverage = %0f", cg.get_coverage()), UVM_LOW)      |
    | 39   |                                                           |   endfunction: report_phase                                                                          |
    | 40   |                                                           |                                                                                                      |
    ===========================================================================================================================================================================


    BRANCH COVERAGE
    ===============================
    |     Source: sequence.sv     |
    ===============================
    | Branch/Line          | Hits |
    ===============================
    | IF branch#3#1#       |  0/2 |
    |     if_branch        |    0 |
    |     else_branch      |    0 |
    |----------------------|------|
    | IF branch#3#2#       |  0/2 |
    |     if_branch        |    0 |
    |     all_false_branch |    0 |
    |----------------------|------|
    | IF branch#3#3#       |  0/2 |
    |     if_branch        |    0 |
    |     else_branch      |    0 |
    |----------------------|------|
    | IF branch#3#4#       |  0/2 |
    |     if_branch        |    0 |
    |     all_false_branch |    0 |
    |----------------------|------|
    | IF branch#3#5#       |  0/2 |
    |     if_branch        |    0 |
    |     all_false_branch |    0 |
    |----------------------|------|
    | IF branch#38#1#      |  0/2 |
    |     if_branch        |    0 |
    |     all_false_branch |    0 |
    ===============================


    COVERGROUP COVERAGE
    ==================================================================================
    |                   Covergroup                   |   Hits   |  Goal /  | Status  |
    |                                                |          | At Least |         |
    ==================================================================================
    | TYPE /\package testbench_pkg\/rand_sequence/cg | 100.000% | 100.000% | Covered |
    ==================================================================================
    | INSTANCE <UNNAMED1>                            | 100.000% | 100.000% | Covered |
    |------------------------------------------------|----------|----------|---------|
    | COVERPOINT <UNNAMED1>::data                    | 100.000% | 100.000% | Covered |
    |------------------------------------------------|----------|----------|---------|
    | bin range_data[0]                              |        4 |        1 | Covered |
    | bin range_data[1]                              |        8 |        1 | Covered |
    | bin range_data[2]                              |        3 |        1 | Covered |
    | bin range_data[3]                              |        4 |        1 | Covered |
    | bin range_data[4]                              |        2 |        1 | Covered |
    | bin range_data[5]                              |        2 |        1 | Covered |
    | bin range_data[6]                              |        2 |        1 | Covered |
    | bin range_data[7]                              |        3 |        1 | Covered |
    | bin range_data[8]                              |        4 |        1 | Covered |
    | bin range_data[9]                              |        4 |        1 | Covered |
    | bin range_data[10]                             |        8 |        1 | Covered |
    | bin range_data[11]                             |        7 |        1 | Covered |
    | bin range_data[12]                             |        2 |        1 | Covered |
    | bin range_data[13]                             |        3 |        1 | Covered |
    | bin range_data[14]                             |        6 |        1 | Covered |
    | bin range_data[15]                             |        4 |        1 | Covered |
    | bin range_data[16]                             |        5 |        1 | Covered |
    | bin range_data[17]                             |        3 |        1 | Covered |
    | bin range_data[18]                             |        2 |        1 | Covered |
    | bin range_data[19]                             |        4 |        1 | Covered |
    | bin range_data[20]                             |        6 |        1 | Covered |
    | bin range_data[21]                             |        3 |        1 | Covered |
    | bin range_data[22]                             |        2 |        1 | Covered |
    | bin range_data[23]                             |        4 |        1 | Covered |
    | bin range_data[24]                             |        6 |        1 | Covered |
    | bin range_data[25]                             |        3 |        1 | Covered |
    | bin range_data[26]                             |        3 |        1 | Covered |
    | bin range_data[27]                             |        5 |        1 | Covered |
    | bin range_data[28]                             |        3 |        1 | Covered |
    | bin range_data[29]                             |        5 |        1 | Covered |
    | bin range_data[30]                             |        1 |        1 | Covered |
    | bin range_data[31]                             |        3 |        1 | Covered |
    | bin range_data[32]                             |        3 |        1 | Covered |
    | bin range_data[33]                             |        4 |        1 | Covered |
    | bin range_data[34]                             |        5 |        1 | Covered |
    | bin range_data[35]                             |        5 |        1 | Covered |
    | bin range_data[36]                             |        6 |        1 | Covered |
    | bin range_data[37]                             |        7 |        1 | Covered |
    | bin range_data[38]                             |        2 |        1 | Covered |
    | bin range_data[39]                             |        1 |        1 | Covered |
    | bin range_data[40]                             |        1 |        1 | Covered |
    | bin range_data[41]                             |        3 |        1 | Covered |
    | bin range_data[42]                             |        5 |        1 | Covered |
    | bin range_data[43]                             |        4 |        1 | Covered |
    | bin range_data[44]                             |        2 |        1 | Covered |
    | bin range_data[45]                             |        3 |        1 | Covered |
    | bin range_data[46]                             |        4 |        1 | Covered |
    | bin range_data[47]                             |        4 |        1 | Covered |
    | bin range_data[48]                             |        1 |        1 | Covered |
    | bin range_data[49]                             |        5 |        1 | Covered |
    | bin range_data[50]                             |        2 |        1 | Covered |
    | bin range_data[51]                             |        4 |        1 | Covered |
    | bin range_data[52]                             |        7 |        1 | Covered |
    | bin range_data[53]                             |        7 |        1 | Covered |
    | bin range_data[54]                             |        3 |        1 | Covered |
    | bin range_data[55]                             |        3 |        1 | Covered |
    | bin range_data[56]                             |        5 |        1 | Covered |
    | bin range_data[57]                             |        3 |        1 | Covered |
    | bin range_data[58]                             |        8 |        1 | Covered |
    | bin range_data[59]                             |        3 |        1 | Covered |
    | bin range_data[60]                             |        4 |        1 | Covered |
    | bin range_data[61]                             |        5 |        1 | Covered |
    | bin range_data[62]                             |        1 |        1 | Covered |
    | bin range_data[63]                             |        7 |        1 | Covered |
    ==================================================================================


    ASSERTION COVERAGE
    =======================================================
    |      Name       |     Source      | Failed | Passed |
    |-----------------|-----------------|--------|--------|
    | @IMM_ASSERT#25@ | sequence.sv(25) |      0 |     64 |
    | @IMM_ASSERT#28@ | sequence.sv(28) |      0 |    187 |
    =======================================================


CLASS - /\package testbench_pkg\/driver : work.testbench_pkg/\testbench_pkg driver \


    SUMMARY
    ============================================
    |   Coverage Type    | Weight | Hits/Total |
    ============================================
    | Statement Coverage |      1 |    92.105% |
    |--------------------|--------|------------|
    | Statements         |        |    35 / 38 |
    | Subprograms        |        |      4 / 7 |
    ============================================
    | Branch Coverage    |      1 |   100.000% |
    |--------------------|--------|------------|
    | Branch paths       |        |      2 / 2 |
    | Branches           |        |      1 / 1 |
    ============================================
    WEIGHTED AVERAGE LOCAL: 96.052%


    STATEMENT COVERAGE
    ===================================================================================================================================================================================================
    | Line |    Hits     |                                                                             Source: driver.sv                                                                              |
    |------|-------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | 1    |             | import pkg::*;                                                                                                                                                             |
    | 2    |             | class driver extends uvm_driver #(sequence_item #(pkg::G_WORD_WIDTH));                                                                                                     |
    | 3    | UNR,UNR,UNR |   `uvm_component_utils(driver)                                                                                                                                             |
    | 4    |             |                                                                                                                                                                            |
    | 5    |             |   virtual uart_intf intf;                                                                                                                                                  |
    | 6    |             |                                                                                                                                                                            |
    | 7    |             |   function new (string name = "", uvm_component parent);                                                                                                                   |
    | 8    |      1      |     super.new(name,parent);                                                                                                                                                |
    | 9    |             |   endfunction                                                                                                                                                              |
    | 10   |             |                                                                                                                                                                            |
    | 11   |             |   function void build_phase(uvm_phase phase);                                                                                                                              |
    | 12   |      1      |     super.build_phase(phase);                                                                                                                                              |
    | 13   |      1      |     void'(uvm_resource_db#(virtual uart_intf)::read_by_name(.scope("ifs"), .name("uart_intf"), .val(intf)));                                                               |
    | 14   |             |   endfunction                                                                                                                                                              |
    | 15   |             |                                                                                                                                                                            |
    | 16   |             |   virtual task reset_phase(uvm_phase phase);                                                                                                                               |
    | 17   |      1      |     phase.raise_objection(this);                                                                                                                                           |
    | 18   |      1      |     intf.i_rst = 1'b1;                                                                                                                                                     |
    | 19   |             |                                                                                                                                                                            |
    | 20   |      1      |     repeat(5)                                                                                                                                                              |
    | 21   |             |       @(posedge intf.i_clk)                                                                                                                                                |
    | 22   |      5      |     intf.i_rst = 1'b0;                                                                                                                                                     |
    | 23   |             |                                                                                                                                                                            |
    | 24   |      1      |     phase.drop_objection(this);                                                                                                                                            |
    | 25   |             |   endtask: reset_phase                                                                                                                                                     |
    | 26   |             |                                                                                                                                                                            |
    | 27   |             |                                                                                                                                                                            |
    | 28   |             |   virtual task run_phase(uvm_phase phase);                                                                                                                                 |
    | 29   |             |     sequence_item #(pkg::G_WORD_WIDTH) req_item;                                                                                                                           |
    | 30   |             |                                                                                                                                                                            |
    | 31   |      1      |     forever begin                                                                                                                                                          |
    | 32   |     67      |       if(!intf.i_rst) begin                                                                                                                                                |
    | 33   |     65      |           seq_item_port.get_next_item(req_item);                                                                                                                           |
    | 34   |     64      |           intf.i_we = 1;                                                                                                                                                   |
    | 35   |     64      |         intf.i_stb = 1;                                                                                                                                                    |
    | 36   |     64      |         intf.i_addr = 0;                                                                                                                                                   |
    | 37   |     64      |         intf.i_data = req_item.i_data;                                                                                                                                     |
    | 38   |     64      |         @(posedge intf.i_clk);                                                                                                                                             |
    | 39   |             |                                                                                                                                                                            |
    | 40   |             |                                                                                                                                                                            |
    | 41   |     64      |         intf.i_we = 1;                                                                                                                                                     |
    | 42   |     64      |         intf.i_stb = 0;                                                                                                                                                    |
    | 43   |     64      |         intf.i_addr = 0;                                                                                                                                                   |
    | 44   |     64      |         intf.i_data = req_item.i_data;                                                                                                                                     |
    | 45   |     64      |         @(posedge intf.i_clk);                                                                                                                                             |
    | 46   |             |                                                                                                                                                                            |
    | 47   |  64,99692   |         while(!(!intf.o_rx_busy && intf.f_rx_busy_prev)) begin                                                                                                             |
    | 48   |             | //           `uvm_info(get_type_name(),$sformatf("DRIVER rx_busy=0x%0h rx_busy_prev=0x%oh",intf.o_rx_busy,intf.f_rx_busy_prev),UVM_LOW)                                    |
    | 49   |             |                                                                                                                                                                            |
    | 50   |             | //           `uvm_info(get_type_name(),$sformatf("DRIVER we=0x%0h stb=0x%oh, addr=0x%oh, o_data_valid =0x%oh",intf.i_we,intf.i_stb,intf.i_addr,intf.o_data_valid),UVM_LOW) |
    | 51   |    99692    |           intf.i_we = 1;                                                                                                                                                   |
    | 52   |    99692    |           intf.i_stb = 0;                                                                                                                                                  |
    | 53   |    99692    |           intf.i_addr = 0;                                                                                                                                                 |
    | 54   |    99692    |           intf.i_data = req_item.i_data;                                                                                                                                   |
    | 55   |    99692    |           @(posedge intf.i_clk);                                                                                                                                           |
    | 56   |             |         end                                                                                                                                                                |
    | 57   |             |                                                                                                                                                                            |
    | 58   |     64      |         intf.i_we = 0;                                                                                                                                                     |
    | 59   |     64      |         intf.i_stb = 1;                                                                                                                                                    |
    | 60   |     64      |         intf.i_addr = 1;                                                                                                                                                   |
    | 61   |     64      |         intf.i_data = req_item.i_data;                                                                                                                                     |
    | 62   |     64      |         @(posedge intf.i_clk);                                                                                                                                             |
    | 63   |             |                                                                                                                                                                            |
    | 64   |     64      |           seq_item_port.item_done();                                                                                                                                       |
    | 65   |             |       end else                                                                                                                                                             |
    | 66   |      2      |         @(posedge intf.i_clk);                                                                                                                                             |
    | 67   |             |     end                                                                                                                                                                    |
    | 68   |             |   endtask                                                                                                                                                                  |
    ===================================================================================================================================================================================================


    BRANCH COVERAGE
    ==========================
    |   Source: driver.sv    |
    ==========================
    | Branch/Line     | Hits |
    ==========================
    | IF branch#32#1# |  2/2 |
    |     if_branch   |   65 |
    |     else_branch |    2 |
    ==========================


CLASS - /\package testbench_pkg\/monitor_in : work.testbench_pkg/\testbench_pkg monitor_in \


    SUMMARY
    ============================================
    |   Coverage Type    | Weight | Hits/Total |
    ============================================
    | Statement Coverage |      1 |    78.571% |
    |--------------------|--------|------------|
    | Statements         |        |    11 / 14 |
    | Subprograms        |        |      3 / 6 |
    ============================================
    | Branch Coverage    |      1 |   100.000% |
    |--------------------|--------|------------|
    | Branch paths       |        |      2 / 2 |
    | Branches           |        |      1 / 1 |
    ============================================
    WEIGHTED AVERAGE LOCAL: 89.285%


    STATEMENT COVERAGE
    =====================================================================================================================================
    | Line |    Hits     |                                              Source: monitor.sv                                              |
    |------|-------------|--------------------------------------------------------------------------------------------------------------|
    | 1    |             | import pkg::*;                                                                                               |
    | 2    |             | class monitor_in extends uvm_monitor;                                                                        |
    | 3    | UNR,UNR,UNR |   `uvm_component_utils(monitor_in)                                                                           |
    | 4    |             |                                                                                                              |
    | 5    |             |   uvm_analysis_port #(sequence_item #(G_WORD_WIDTH)) mon_in;                                                 |
    | 6    |             |   sequence_item #(G_WORD_WIDTH) datum;                                                                       |
    | 7    |             |   virtual uart_intf intf;                                                                                    |
    | 8    |             |                                                                                                              |
    | 9    |             |   function new (string name = "", uvm_component parent);                                                     |
    | 10   |      1      |     super.new(name,parent);                                                                                  |
    | 11   |             |   endfunction : new                                                                                          |
    | 12   |             |                                                                                                              |
    | 13   |             |                                                                                                              |
    | 14   |             |   function void build_phase(uvm_phase phase);                                                                |
    | 15   |      1      |     super.build_phase(phase);                                                                                |
    | 16   |      1      |     void'(uvm_resource_db#(virtual uart_intf)::read_by_name(.scope("ifs"), .name("uart_intf"), .val(intf))); |
    | 17   |             |                                                                                                              |
    | 18   |             |                                                                                                              |
    | 19   |      1      |     mon_in = new ("mon_in",this);                                                                            |
    | 20   |             |   endfunction: build_phase                                                                                   |
    | 21   |             |                                                                                                              |
    | 22   |             |   virtual task run_phase(uvm_phase phase);                                                                   |
    | 23   |      1      |     forever begin                                                                                            |
    | 24   |    99892    |       if(intf.i_we && intf.i_stb && intf.i_addr == 0) begin                                                  |
    | 25   |     64      |         datum = sequence_item #(G_WORD_WIDTH)::type_id::create("datum",this);                                |
    | 26   |     64      |         datum.i_data = intf.i_data;                                                                          |
    | 27   |             | //         `uvm_info(get_type_name(),$sformatf("MONITOR IN  i_data=0x%0h",datum.i_data),UVM_LOW)             |
    | 28   |     64      |         mon_in.write(datum);                                                                                 |
    | 29   |     64      |         @(posedge intf.i_clk);                                                                               |
    | 30   |             |       end else                                                                                               |
    | 31   |    99828    |         @(posedge intf.i_clk);                                                                               |
    | 32   |             |     end                                                                                                      |
    | 33   |             |   endtask : run_phase                                                                                        |
    =====================================================================================================================================


    BRANCH COVERAGE
    ===========================
    |   Source: monitor.sv    |
    ===========================
    | Branch/Line     | Hits  |
    ===========================
    | IF branch#24#1# |   2/2 |
    |     if_branch   |    64 |
    |     else_branch | 99828 |
    ===========================


CLASS - /\package testbench_pkg\/monitor_out : work.testbench_pkg/\testbench_pkg monitor_out \


    SUMMARY
    ============================================
    |   Coverage Type    | Weight | Hits/Total |
    ============================================
    | Statement Coverage |      1 |    78.571% |
    |--------------------|--------|------------|
    | Statements         |        |    11 / 14 |
    | Subprograms        |        |      3 / 6 |
    ============================================
    | Branch Coverage    |      1 |   100.000% |
    |--------------------|--------|------------|
    | Branch paths       |        |      2 / 2 |
    | Branches           |        |      1 / 1 |
    ============================================
    WEIGHTED AVERAGE LOCAL: 89.285%


    STATEMENT COVERAGE
    =====================================================================================================================================
    | Line |    Hits     |                                            Source: monitor_out.sv                                            |
    |------|-------------|--------------------------------------------------------------------------------------------------------------|
    | 1    |             | import pkg::*;                                                                                               |
    | 2    |             | class monitor_out extends uvm_monitor;                                                                       |
    | 3    | UNR,UNR,UNR |   `uvm_component_utils(monitor_out)                                                                          |
    | 4    |             |                                                                                                              |
    | 5    |             |   uvm_analysis_port #(sequence_item #(G_WORD_WIDTH)) mon_out;                                                |
    | 6    |             |   virtual uart_intf intf;                                                                                    |
    | 7    |             |   sequence_item #(G_WORD_WIDTH) datum;                                                                       |
    | 8    |             |                                                                                                              |
    | 9    |             |   function new (string name = "", uvm_component parent);                                                     |
    | 10   |      1      |     super.new(name,parent);                                                                                  |
    | 11   |             |   endfunction : new                                                                                          |
    | 12   |             |                                                                                                              |
    | 13   |             |                                                                                                              |
    | 14   |             |   function void build_phase(uvm_phase phase);                                                                |
    | 15   |      1      |     super.build_phase(phase);                                                                                |
    | 16   |      1      |     void'(uvm_resource_db#(virtual uart_intf)::read_by_name(.scope("ifs"), .name("uart_intf"), .val(intf))); |
    | 17   |             |                                                                                                              |
    | 18   |      1      |     mon_out = new ("mon_out",this);                                                                          |
    | 19   |             |   endfunction: build_phase                                                                                   |
    | 20   |             |                                                                                                              |
    | 21   |             |   virtual task run_phase(uvm_phase phase);                                                                   |
    | 22   |             |                                                                                                              |
    | 23   |      1      |     forever begin                                                                                            |
    | 24   |    99892    |       if(!intf.i_we && intf.i_stb && intf.i_addr == 1) begin                                                 |
    | 25   |     69      |         datum = sequence_item #(G_WORD_WIDTH)::type_id::create("datum",this);                                |
    | 26   |     69      |         @(posedge intf.i_clk);                                                                               |
    | 27   |     68      |         datum.o_data = intf.o_data;                                                                          |
    | 28   |             | //         `uvm_info(get_type_name(),$sformatf("MONITOR OUT  o_data=0x%0h",datum.o_data),UVM_LOW)            |
    | 29   |     68      |         mon_out.write(datum);                                                                                |
    | 30   |             |       end else                                                                                               |
    | 31   |    99823    |         @(posedge intf.i_clk);                                                                               |
    | 32   |             |     end                                                                                                      |
    | 33   |             |   endtask : run_phase                                                                                        |
    =====================================================================================================================================


    BRANCH COVERAGE
    =============================
    |  Source: monitor_out.sv   |
    =============================
    | Branch/Line     |  Hits   |
    =============================
    | IF branch#24#1# |     2/2 |
    |     if_branch   |      69 |
    |     else_branch |   99823 |
    =============================


CLASS - /\package testbench_pkg\/scoreboard : work.testbench_pkg/\testbench_pkg scoreboard \


    SUMMARY
    ============================================
    |   Coverage Type    | Weight | Hits/Total |
    ============================================
    | Statement Coverage |      1 |    83.870% |
    |--------------------|--------|------------|
    | Statements         |        |    26 / 31 |
    | Subprograms        |        |      4 / 7 |
    ============================================
    | Branch Coverage    |      1 |    50.000% |
    |--------------------|--------|------------|
    | Branch paths       |        |     5 / 10 |
    | Branches           |        |      1 / 5 |
    ============================================
    WEIGHTED AVERAGE LOCAL: 66.935%


    STATEMENT COVERAGE
    ======================================================================================================================================
    | Line |    Hits     |                                             Source: scoreboard.sv                                             |
    |------|-------------|---------------------------------------------------------------------------------------------------------------|
    | 1    |             | import pkg::*;                                                                                                |
    | 2    |             | class scoreboard extends uvm_scoreboard;                                                                      |
    | 3    | UNR,UNR,264 |   `uvm_component_utils(scoreboard)                                                                            |
    | 4    |             |                                                                                                               |
    | 5    |             |   function new(string name = "", uvm_component parent);                                                       |
    | 6    |      1      |     super.new(name,parent);                                                                                   |
    | 7    |             |   endfunction : new                                                                                           |
    | 8    |             |                                                                                                               |
    | 9    |             |   uvm_tlm_analysis_fifo #(sequence_item #(G_WORD_WIDTH)) fifo_in;                                             |
    | 10   |             |   uvm_tlm_analysis_fifo #(sequence_item #(G_WORD_WIDTH)) fifo_out;                                            |
    | 11   |             |                                                                                                               |
    | 12   |             |   uvm_get_port #(sequence_item #(G_WORD_WIDTH)) data_get_port;                                                |
    | 13   |             |   uvm_get_port #(sequence_item #(G_WORD_WIDTH)) result_get_port;                                              |
    | 14   |             |                                                                                                               |
    | 15   |             |   sequence_item #(G_WORD_WIDTH) in;                                                                           |
    | 16   |             |   sequence_item #(G_WORD_WIDTH) out;                                                                          |
    | 17   |             |                                                                                                               |
    | 18   |             |   function void build_phase (uvm_phase phase);                                                                |
    | 19   |      1      |     super.build_phase(phase);                                                                                 |
    | 20   |             |                                                                                                               |
    | 21   |      1      |     fifo_in = new("fifo_in",this);                                                                            |
    | 22   |      1      |     fifo_out = new("fifo_out",this);                                                                          |
    | 23   |             |                                                                                                               |
    | 24   |      1      |     data_get_port = new("data_get_port",this);                                                                |
    | 25   |      1      |     result_get_port = new("result_get_port",this);                                                            |
    | 26   |             |   endfunction : build_phase                                                                                   |
    | 27   |             |                                                                                                               |
    | 28   |             |   function void connect_phase(uvm_phase phase);                                                               |
    | 29   |      1      |     super.connect_phase(phase);                                                                               |
    | 30   |      1      |     data_get_port.connect(fifo_in.get_export);                                                                |
    | 31   |      1      |     result_get_port.connect(fifo_out.get_export);                                                             |
    | 32   |             |   endfunction : connect_phase                                                                                 |
    | 33   |             |                                                                                                               |
    | 34   |             |   function void check_phase(uvm_phase phase);                                                                 |
    | 35   |             |     int cnt_items = 0;                                                                                        |
    | 36   |      1      |     super.check_phase(phase);                                                                                 |
    | 37   |             |                                                                                                               |
    | 38   |    1,68     |     while(result_get_port.can_get()) begin                                                                    |
    | 39   |     68      |       in  = sequence_item #(G_WORD_WIDTH)::type_id::create("in",this);                                        |
    | 40   |     68      |       out = sequence_item #(G_WORD_WIDTH)::type_id::create("out",this);                                       |
    | 41   |             |                                                                                                               |
    | 42   |     68      |       result_get_port.try_get(out);                                                                           |
    | 43   |     68      |       data_get_port.try_get(in);                                                                              |
    | 44   |             |                                                                                                               |
    | 45   |     68      |       cnt_items ++;                                                                                           |
    | 46   |  68,68,68   |       `uvm_info(get_type_name(),$sformatf("cnt items = 0x%0h",cnt_items),UVM_LOW)                             |
    | 47   |     68      |       if(in != null && out !=null) begin                                                                      |
    | 48   |     64      |         if(in.i_data != out.o_data)                                                                           |
    | 49   |    0,0,0    |           `uvm_error(get_type_name(),$sformatf("FAIL i_data=0x%0h, o_data=0x%0h",in.i_data,out.o_data))       |
    | 50   |             |         else                                                                                                  |
    | 51   |  64,64,64   |           `uvm_info(get_type_name(),$sformatf("PASS i_data=0x%0h,o_data=0x%0h",in.i_data,out.o_data),UVM_LOW) |
    | 52   |             |       end                                                                                                     |
    | 53   |             |     end                                                                                                       |
    ======================================================================================================================================


    BRANCH COVERAGE
    ===============================
    |    Source: scoreboard.sv    |
    ===============================
    | Branch/Line          | Hits |
    ===============================
    | IF branch#46#1#      |  1/2 |
    |     if_branch        |   68 |
    |     all_false_branch |    0 |
    |----------------------|------|
    | IF branch#47#1#      |  2/2 |
    |     if_branch        |   64 |
    |     all_false_branch |    4 |
    |----------------------|------|
    | IF branch#48#1#      |  1/2 |
    |     if_branch        |    0 |
    |     else_branch      |   64 |
    |----------------------|------|
    | IF branch#49#1#      |  0/2 |
    |     if_branch        |    0 |
    |     all_false_branch |    0 |
    |----------------------|------|
    | IF branch#51#1#      |  1/2 |
    |     if_branch        |   64 |
    |     all_false_branch |    0 |
    ===============================


CLASS - /\package testbench_pkg\/env : work.testbench_pkg/\testbench_pkg env \


    SUMMARY
    ============================================
    |   Coverage Type    | Weight | Hits/Total |
    ============================================
    | Statement Coverage |      1 |    78.571% |
    |--------------------|--------|------------|
    | Statements         |        |    11 / 14 |
    | Subprograms        |        |      3 / 6 |
    ============================================
    WEIGHTED AVERAGE LOCAL: 78.571%


    STATEMENT COVERAGE
    =================================================================================================================
    | Line |    Hits     |                                      Source: env.sv                                      |
    |------|-------------|------------------------------------------------------------------------------------------|
    | 1    |             | import pkg::*;                                                                           |
    | 2    |             | class env extends uvm_env;                                                               |
    | 3    | UNR,UNR,UNR |   `uvm_component_utils(env)                                                              |
    | 4    |             |                                                                                          |
    | 5    |             |   uvm_sequencer #(sequence_item #(G_WORD_WIDTH)) seqr;                                   |
    | 6    |             |   driver drv;                                                                            |
    | 7    |             |   monitor_out res_mon;                                                                   |
    | 8    |             |   monitor_in data_mon;                                                                   |
    | 9    |             |   scoreboard scb;                                                                        |
    | 10   |             |                                                                                          |
    | 11   |             |   function new (string name = "", uvm_component parent);                                 |
    | 12   |      1      |     super.new(name,parent);                                                              |
    | 13   |             |   endfunction : new                                                                      |
    | 14   |             |                                                                                          |
    | 15   |             |   function void build_phase(uvm_phase phase);                                            |
    | 16   |      1      |     super.build_phase(phase);                                                            |
    | 17   |      1      |     seqr = uvm_sequencer #(sequence_item #(G_WORD_WIDTH))::type_id::create("seqr",this); |
    | 18   |             |                                                                                          |
    | 19   |      1      |     drv = driver::type_id::create("drv",this);                                           |
    | 20   |      1      |     res_mon = monitor_out::type_id::create("res_mon",this);                              |
    | 21   |      1      |     data_mon = monitor_in::type_id::create("data_mon",this);                             |
    | 22   |      1      |     scb = scoreboard::type_id::create("scb",this);                                       |
    | 23   |             |   endfunction : build_phase                                                              |
    | 24   |             |                                                                                          |
    | 25   |             |   function void connect_phase(uvm_phase phase);                                          |
    | 26   |      1      |     super.connect_phase(phase);                                                          |
    | 27   |      1      |     drv.seq_item_port.connect(seqr.seq_item_export);                                     |
    | 28   |      1      |     data_mon.mon_in.connect(scb.fifo_in.analysis_export);                                |
    | 29   |      1      |     res_mon.mon_out.connect(scb.fifo_out.analysis_export);                               |
    | 30   |             |   endfunction : connect_phase                                                            |
    | 31   |             |                                                                                          |
    =================================================================================================================


CLASS - /\package testbench_pkg\/test : work.testbench_pkg/\testbench_pkg test \


    SUMMARY
    ============================================
    |   Coverage Type    | Weight | Hits/Total |
    ============================================
    | Statement Coverage |      1 |    81.818% |
    |--------------------|--------|------------|
    | Statements         |        |     9 / 11 |
    | Subprograms        |        |      4 / 6 |
    ============================================
    WEIGHTED AVERAGE LOCAL: 81.818%


    STATEMENT COVERAGE
    ===============================================================================
    | Line |   Hits    |                     Source: test.sv                      |
    |------|-----------|----------------------------------------------------------|
    | 1    |           | class test extends uvm_test;                             |
    | 2    | UNR,UNR,1 |   `uvm_component_utils(test)                             |
    | 3    |           |                                                          |
    | 4    |           |   env environment;                                       |
    | 5    |           |   rand_sequence seq;                                     |
    | 6    |           |                                                          |
    | 7    |           |                                                          |
    | 8    |           |   function new (string name = "", uvm_component parent); |
    | 9    |     1     |     super.new(name,parent);                              |
    | 10   |           |   endfunction : new                                      |
    | 11   |           |                                                          |
    | 12   |           |                                                          |
    | 13   |           |   function void build_phase(uvm_phase phase);            |
    | 14   |     1     |     super.build_phase(phase);                            |
    | 15   |     1     |     environment = env::type_id::create("env",this);      |
    | 16   |           |   endfunction : build_phase                              |
    | 17   |           |                                                          |
    | 18   |           |   task run_phase(uvm_phase phase);                       |
    | 19   |     1     |     seq = rand_sequence::type_id::create("seq",this);    |
    | 20   |     1     |     phase.raise_objection(this);                         |
    | 21   |     1     |     seq.start(environment.seqr);                         |
    | 22   |           |                                                          |
    | 23   |     1     |     phase.phase_done.set_drain_time(this, 50ns);         |
    | 24   |     1     |     phase.drop_objection(this);                          |
    | 25   |           |                                                          |
    | 26   |           |   endtask : run_phase                                    |
    ===============================================================================


CLASS - /\package testbench_pkg\/@sequence_item#(H6)@ : work.testbench_pkg/\testbench_pkg sequence_item \


    SUMMARY
    ============================================
    |   Coverage Type    | Weight | Hits/Total |
    ============================================
    | Statement Coverage |      1 |    12.500% |
    |--------------------|--------|------------|
    | Statements         |        |     2 / 16 |
    | Subprograms        |        |      2 / 6 |
    ============================================
    | Branch Coverage    |      1 |     0.000% |
    |--------------------|--------|------------|
    | Branch paths       |        |     0 / 10 |
    | Branches           |        |      0 / 5 |
    ============================================
    WEIGHTED AVERAGE LOCAL: 6.250%


    STATEMENT COVERAGE
    ========================================================================================================================================================
    | Line |                            Hits                            |                             Source: sequence_item.sv                             |
    |------|------------------------------------------------------------|----------------------------------------------------------------------------------|
    | 1    |                                                            | class sequence_item #(parameter int G_WORD_WIDTH = 4) extends uvm_sequence_item; |
    | 2    | UNR,UNR,UNR,UNR,UNR,UNR,64,UNR,UNR,UNR,UNR,UNR,UNR,UNR,UNR |   `uvm_object_utils(sequence_item #(G_WORD_WIDTH))                               |
    | 3    |                                                            |                                                                                  |
    | 4    |                                                            |   rand logic [G_WORD_WIDTH-1:0] i_data;                                          |
    | 5    |                                                            |   logic i_we;                                                                    |
    | 6    |                                                            |   logic i_stb;                                                                   |
    | 7    |                                                            |   logic i_addr;                                                                  |
    | 8    |                                                            |   logic [G_WORD_WIDTH-1:0] o_data;                                               |
    | 9    |                                                            |   logic o_rx_error;                                                              |
    | 10   |                                                            |                                                                                  |
    | 11   |                                                            |   function new(string name = "");                                                |
    | 12   |                            333                             |     super.new(name);                                                             |
    | 13   |                                                            |   endfunction : new                                                              |
    | 14   |                                                            |                                                                                  |
    ========================================================================================================================================================


    BRANCH COVERAGE
    ===============================
    |  Source: sequence_item.sv   |
    ===============================
    | Branch/Line          | Hits |
    ===============================
    | IF branch#2#1#       |  0/2 |
    |     if_branch        |    0 |
    |     else_branch      |    0 |
    |----------------------|------|
    | IF branch#2#2#       |  0/2 |
    |     if_branch        |    0 |
    |     all_false_branch |    0 |
    |----------------------|------|
    | IF branch#2#3#       |  0/2 |
    |     if_branch        |    0 |
    |     else_branch      |    0 |
    |----------------------|------|
    | IF branch#2#4#       |  0/2 |
    |     if_branch        |    0 |
    |     all_false_branch |    0 |
    |----------------------|------|
    | IF branch#2#5#       |  0/2 |
    |     if_branch        |    0 |
    |     all_false_branch |    0 |
    ===============================


+++++++++++++++++++++++++++++++++++++++++++++
++++++++++       DESIGN UNITS      ++++++++++
+++++++++++++++++++++++++++++++++++++++++++++


CUMULATIVE SUMMARY
=============================================
|    Coverage Type    | Weight | Hits/Total |
=============================================
| Statement Coverage  |      1 |    81.949% |
|---------------------|--------|------------|
| Statements          |        |  227 / 277 |
| Subprograms         |        |    26 / 52 |
=============================================
| Branch Coverage     |      1 |    66.250% |
|---------------------|--------|------------|
| Branch paths        |        |    53 / 80 |
| Branches            |        |    24 / 39 |
=============================================
| Covergroup Coverage |      1 |   100.000% |
|---------------------|--------|------------|
| Types               |        |      1 / 1 |
=============================================
| Assertion Coverage  |      1 |   100.000% |
|---------------------|--------|------------|
| Assertions          |        |      3 / 3 |
| Covers              |        |      2 / 2 |
=============================================
CUMULATIVE DESIGN-BASED COVERAGE: 87.049%
COVERED DESIGN UNITS: 5 / 13
FILES: 10


MODULE - work.tb_top


    SUMMARY
    ============================================
    |   Coverage Type    | Weight | Hits/Total |
    ============================================
    | Statement Coverage |      1 |   100.000% |
    |--------------------|--------|------------|
    | Statements         |        |      6 / 6 |
    | Subprograms        |        |      0 / 0 |
    ============================================
    WEIGHTED AVERAGE: 100.000%


    STATEMENT COVERAGE
    ================================================================================================================
    | Line |  Hits  |                                     Source: testbench.sv                                     |
    |------|--------|----------------------------------------------------------------------------------------------|
    | 42   |        |     //Registers the Interface in the configuration block                                     |
    | 43   |        |     //so that other blocks can use it                                                        |
    | 44   |   1    |     uvm_resource_db#(virtual uart_intf)::set(.scope("ifs"), .name("uart_intf"), .val(intf)); |
    | 45   |        |                                                                                              |
    | 46   |        |     //Executes the test                                                                      |
    | 47   |   1    |     run_test("test");                                                                        |
    | 48   |        |   end                                                                                        |
    | 49   |        |                                                                                              |
    | 50   |        |   //Variable initialization                                                                  |
    | 51   |        |   initial begin                                                                              |
    | 52   |   1    |     intf.i_clk = 1'b1;                                                                       |
    | 53   |        |     // Dump waves                                                                            |
    | 54   |   1    |     $dumpfile("dump.vcd");                                                                   |
    | 55   |   1    |     $dumpvars(0, tb_top);                                                                    |
    | 56   |        |   end                                                                                        |
    | 57   |        |                                                                                              |
    | 58   |        |   //Clock generation                                                                         |
    | 59   |        |   always begin                                                                               |
    | 60   | 199782 |     #5 intf.i_clk = ~intf.i_clk;                                                             |
    | 61   |        |   end                                                                                        |
    | 62   |        |                                                                                              |
    ================================================================================================================


MODULE - work.uart_top


    SUMMARY
    ============================================
    |   Coverage Type    | Weight | Hits/Total |
    ============================================
    | Statement Coverage |      1 |   100.000% |
    |--------------------|--------|------------|
    | Statements         |        |      3 / 3 |
    | Subprograms        |        |      0 / 0 |
    ============================================
    | Branch Coverage    |      1 |   100.000% |
    |--------------------|--------|------------|
    | Branch paths       |        |      2 / 2 |
    | Branches           |        |      1 / 1 |
    ============================================
    WEIGHTED AVERAGE: 100.000%


    STATEMENT COVERAGE
    ========================================================================
    | Line | Hits  |                   Source: design.sv                   |
    |------|-------|-------------------------------------------------------|
    | 382  |       |     // for uvm verification purposes                  |
    | 383  |       |     always_ff @(posedge i_clk) begin : o_rx_busy_prev |
    | 384  | 99892 |         if(i_rst) begin                               |
    | 385  |   1   |             f_rx_busy_prev <= 0;                      |
    | 386  |       |         end else begin                                |
    | 387  | 99891 |             f_rx_busy_prev <= o_rx_busy;              |
    | 388  |       |         end                                           |
    | 389  |       |     end                                               |
    ========================================================================


    BRANCH COVERAGE
    ============================
    |    Source: design.sv     |
    ============================
    | Branch/Line      | Hits  |
    ============================
    | IF branch#384#1# |   2/2 |
    |     if_branch    |     1 |
    |     else_branch  | 99891 |
    ============================


MODULE - work.wb_regs


    SUMMARY
    ============================================
    |   Coverage Type    | Weight | Hits/Total |
    ============================================
    | Statement Coverage |      1 |   100.000% |
    |--------------------|--------|------------|
    | Statements         |        |    15 / 15 |
    | Subprograms        |        |      0 / 0 |
    ============================================
    | Branch Coverage    |      1 |   100.000% |
    |--------------------|--------|------------|
    | Branch paths       |        |      6 / 6 |
    | Branches           |        |      3 / 3 |
    ============================================
    WEIGHTED AVERAGE: 100.000%


    STATEMENT COVERAGE
    ==========================================================================
    | Line | Hits  |                    Source: design.sv                    |
    |------|-------|---------------------------------------------------------|
    | 58   |       |                                                         |
    | 59   |       |     always_ff @(posedge i_clk) begin : manage_inf_regs  |
    | 60   | 99892 |         if(i_rst) begin                                 |
    | 61   |   1   |             w_tx_reg <= 0;                              |
    | 62   |   1   |             o_ack <= 1'b0;                              |
    | 63   |   1   |             o_tx_en <= 1'b0;                            |
    | 64   |   1   |             o_data_valid <= 1'b0;                       |
    | 65   |       |         end else begin                                  |
    | 66   | 99891 |             o_ack <= i_stb;                             |
    | 67   | 99891 |             o_tx_en <= 1'b0;                            |
    | 68   | 99891 |             o_data_valid <= 1'b0;                       |
    | 69   |       |                                                         |
    | 70   | 99891 |             if (i_we && i_stb && i_addr == 0) begin     |
    | 71   |  64   |                 w_tx_reg <= i_data;                     |
    | 72   |  64   |                 o_tx_en <= 1'b1;                        |
    | 73   | 99827 |             end else if (!i_we && i_stb && i_addr == 1) |
    | 74   |  69   |                 o_data <= i_uart_rd_data;               |
    | 75   | 99891 |                 o_data_valid <= 1'b1;                   |
    | 76   |       |         end                                             |
    | 77   |       |     end                                                 |
    | 78   |       |                                                         |
    | 79   |  66   |     assign o_tx_reg = w_tx_reg;                         |
    | 80   |       |                                                         |
    | 81   |       | endmodule : wb_regs                                     |
    ==========================================================================


    BRANCH COVERAGE
    ================================
    |      Source: design.sv       |
    ================================
    | Branch/Line          | Hits  |
    ================================
    | IF branch#60#1#      |   2/2 |
    |     if_branch        |     1 |
    |     else_branch      | 99891 |
    |----------------------|-------|
    | IF branch#70#1#      |   2/2 |
    |     if_branch        |    64 |
    |     else_branch      | 99827 |
    |----------------------|-------|
    | IF branch#73#1#      |   2/2 |
    |     if_branch        |    69 |
    |     all_false_branch | 99758 |
    ================================


MODULE - work.uart


    SUMMARY
    ============================================
    |   Coverage Type    | Weight | Hits/Total |
    ============================================
    | Statement Coverage |      1 |   100.000% |
    |--------------------|--------|------------|
    | Statements         |        |    81 / 81 |
    | Subprograms        |        |      0 / 0 |
    ============================================
    | Branch Coverage    |      1 |   100.000% |
    |--------------------|--------|------------|
    | Branch paths       |        |    34 / 34 |
    | Branches           |        |    16 / 16 |
    ============================================
    | Assertion Coverage |      1 |   100.000% |
    |--------------------|--------|------------|
    | Assertions         |        |      1 / 1 |
    | Covers             |        |      2 / 2 |
    ============================================
    WEIGHTED AVERAGE: 100.000%


    STATEMENT COVERAGE
    ======================================================================================================================
    | Line | Hits  |                                          Source: design.sv                                          |
    |------|-------|-----------------------------------------------------------------------------------------------------|
    | 149  |       |                                                                                                     |
    | 150  |       |                                                                                                     |
    | 151  |  66   |     assign o_data = w_rx_data;                                                                      |
    | 152  |       |                                                                                                     |
    | 153  |       |     always_ff @(posedge i_clk) begin : gen_pulse                                                    |
    | 154  | 99892 |         if(i_rst) begin                                                                             |
    | 155  |   1   |             cnt_baud <= 0;                                                                          |
    | 156  |   1   |             r_baud_pulse <= 1'b0;                                                                   |
    | 157  |   1   |             cnt_oversample <= 0;                                                                    |
    | 158  |   1   |             r_oversample_pulse <= 1'b0;                                                             |
    | 159  |       |         end else begin                                                                              |
    | 160  | 99891 |             if ($size(RangeBaud)'(cnt_baud) < RangeBaud) begin                                      |
    | 161  | 99250 |                 cnt_baud <= cnt_baud + 1;                                                           |
    | 162  | 99250 |                 r_baud_pulse <= 1'b0;                                                               |
    | 163  |       |             end else begin                                                                          |
    | 164  |  641  |                 cnt_baud <= 0;                                                                      |
    | 165  |  641  |                 r_baud_pulse <= 1'b1;                                                               |
    | 166  |  641  |                 cnt_oversample <= 0;                                                                |
    | 167  |       |             end                                                                                     |
    | 168  |       |                                                                                                     |
    | 169  | 99891 |             if ($size(RangeOversample)'(cnt_oversample) < RangeOversample) begin                    |
    | 170  | 88792 |                 cnt_oversample <= cnt_oversample + 1;                                               |
    | 171  | 88792 |                 r_oversample_pulse <= 1'b0;                                                         |
    | 172  |       |             end else begin                                                                          |
    | 173  | 11099 |                 cnt_oversample <= 0;                                                                |
    | 174  | 11099 |                 r_oversample_pulse <= 1'b1;                                                         |
    | 175  |       |             end                                                                                     |
    | 176  |       |         end                                                                                         |
    | 177  |       |     end                                                                                             |
    | 178  |       |                                                                                                     |
    | 179  |       |     always_ff @(posedge i_clk) begin : TX_FSM                                                       |
    | 180  | 99892 |         if(i_rst) begin                                                                             |
    | 181  |   1   |             o_tx_busy <= 1'b0;                                                                      |
    | 182  |   1   |             state_tx <= IDLE_TX;                                                                    |
    | 183  |   1   |             cnt_digits_sent <= 0;                                                                   |
    | 184  |   1   |             r_tx_data <= 0;                                                                         |
    | 185  |   1   |             o_tx <= 1'b1;                                                                           |
    | 186  |       |         end else begin                                                                              |
    | 187  | 99891 |             case (state_tx)                                                                         |
    | 188  |       |                 IDLE_TX : begin                                                                     |
    | 189  | 12934 |                     o_tx <= 1'b1;                                                                   |
    | 190  | 12934 |                     if (i_tx_en) begin                                                              |
    | 191  |  64   |                         r_tx_data <= {1'b1, w_tx_parity, i_data, 1'b0};                             |
    | 192  |  64   |                         state_tx <= TRANSMIT;                                                       |
    | 193  |  64   |                         cnt_digits_sent <= 0;                                                       |
    | 194  |  64   |                         o_tx_busy <= 1'b1;                                                          |
    | 195  |       |                     end                                                                             |
    | 196  |       |                 end                                                                                 |
    | 197  |       |                 TRANSMIT :  begin                                                                   |
    | 198  | 86956 |                     if (r_baud_pulse) begin                                                         |
    | 199  |  576  |                         o_tx <= r_tx_data[0];                                                       |
    | 200  |  576  |                         o_tx_busy <= 1'b1;                                                          |
    | 201  |  576  |                         if ($size(G_WORD_WIDTH)'(cnt_digits_sent) < G_WORD_WIDTH + 2) begin         |
    | 202  |  512  |                             r_tx_data <= {1'b1, r_tx_data[$high(r_tx_data): 1]};                    |
    | 203  |  512  |                             cnt_digits_sent <= cnt_digits_sent + 1;                                 |
    | 204  |  512  |                             state_tx <= TRANSMIT;                                                   |
    | 205  |       |                         end else begin                                                              |
    | 206  |  64   |                             cnt_digits_sent <= 0;                                                   |
    | 207  |  64   |                             state_tx <= IDLE_TX;                                                    |
    | 208  |  64   |                             o_tx_busy <= 1'b0;                                                      |
    | 209  |  64   |                             o_tx <= 1'b1;                                                           |
    | 210  |       |                         end                                                                         |
    | 211  |       |                     end                                                                             |
    | 212  |       |                 end                                                                                 |
    | 213  |       |                 default : begin                                                                     |
    | 214  |   1   |                     o_tx_busy <= 1'b0;                                                              |
    | 215  |   1   |                     o_tx <= 1'b1;                                                                   |
    | 216  |   1   |                     state_tx <= IDLE_TX;                                                            |
    | 217  |       |                 end                                                                                 |
    | 218  |       |             endcase                                                                                 |
    | 219  |       |         end                                                                                         |
    | 220  |       |     end                                                                                             |
    | 221  |       |                                                                                                     |
    | 222  |       |     parity #(.G_WIDTH(G_WORD_WIDTH),.G_PARITY_TYPE(G_PARITY_TYPE)) parity_gen (                     |
    | 223  |       |         .i_data(i_data),                                                                            |
    | 224  |       |         .o_parity_bit(w_tx_parity)                                                                  |
    | 225  |       |     );                                                                                              |
    | 226  |       |                                                                                                     |
    | 227  |       |     always_ff @(posedge i_clk) begin : RX_FSM                                                       |
    | 228  | 99892 |         if(i_rst) begin                                                                             |
    | 229  |   1   |             o_rx_busy <= 1'b0;                                                                      |
    | 230  |   1   |             o_rx_error <= 1'b0;                                                                     |
    | 231  |   1   |             w_rx_data <= 0;                                                                         |
    | 232  |   1   |             r_rx_data <= 0;                                                                         |
    | 233  |   1   |             state_rx <= IDLE_RX;                                                                    |
    | 234  |   1   |             cnt_digits_received <= 0;                                                               |
    | 235  |   1   |             cnt_oversample_pulses <= 0;                                                             |
    | 236  |       |         end else begin                                                                              |
    | 237  | 99891 |             case (state_rx)                                                                         |
    | 238  |       |                 IDLE_RX : begin                                                                     |
    | 239  | 11762 |                     if (r_oversample_pulse) begin                                                   |
    | 240  | 1306  |                         if ( !i_rx) begin                                                           |
    | 241  |  512  |                             if ($size(G_OVERSAMPLE)'(cnt_oversample_pulses) <                       |
    | 242  |       |                             G_OVERSAMPLE/2 - 1) begin                                               |
    | 243  |  448  |                                 cnt_oversample_pulses <= cnt_oversample_pulses + 1;                 |
    | 244  |  448  |                                 state_rx <= IDLE_RX;                                                |
    | 245  |       |                             end else begin                                                          |
    | 246  |  64   |                                 o_rx_busy <= 1'b1;                                                  |
    | 247  |  64   |                                 cnt_oversample_pulses <= 0;                                         |
    | 248  |  64   |                                 state_rx <= RECEIVE;                                                |
    | 249  |       |                             end                                                                     |
    | 250  |       |                         end else begin                                                              |
    | 251  |  794  |                             o_rx_busy <= 1'b0;                                                      |
    | 252  |  794  |                             o_rx_error <= 1'b0;                                                     |
    | 253  |  794  |                             r_rx_data <= 0;                                                         |
    | 254  |       |                         end                                                                         |
    | 255  |       |                     end                                                                             |
    | 256  |       |                 end                                                                                 |
    | 257  |       |                 RECEIVE : begin                                                                     |
    | 258  | 88128 |                     o_rx_busy <= 1'b1;                                                              |
    | 259  |       |                                                                                                     |
    | 260  | 88128 |                     if (r_oversample_pulse) begin                                                   |
    | 261  | 9792  |                         if ($size(G_OVERSAMPLE)'(cnt_oversample_pulses) < G_OVERSAMPLE) begin       |
    | 262  | 9216  |                             cnt_oversample_pulses <= cnt_oversample_pulses + 1;                     |
    | 263  |       |                         end else begin                                                              |
    | 264  |  576  |                             cnt_oversample_pulses <= 0;                                             |
    | 265  |  576  |                             if ($size(G_WORD_WIDTH)'(cnt_digits_received) < G_WORD_WIDTH + 2) begin |
    | 266  |  512  |                                 r_rx_data <= {i_rx, r_rx_data[$high(r_rx_data) : 1]};               |
    | 267  |  512  |                                 cnt_digits_received <= cnt_digits_received + 1;                     |
    | 268  |  512  |                                 state_rx <= RECEIVE;                                                |
    | 269  |       |                             end else begin                                                          |
    | 270  |  64   |                                 state_rx <= IDLE_RX;                                                |
    | 271  |  64   |                                 cnt_digits_received <= 0;                                           |
    | 272  |  64   |                                 o_rx_busy <= 1'b0;                                                  |
    | 273  |  64   |                                 w_rx_data <= r_rx_data[$high(r_rx_data) -2 : 0];                    |
    | 274  |       |                               // coverage off (can't find how)                                      |
    | 275  |       |                                 if ( !r_rx_data[$high(r_rx_data)])                                  |
    | 276  |       |                                     o_rx_error <= 1'b1;                                             |
    | 277  |       |                                 if ( ^({r_rx_data[$high(r_rx_data) - 2 : 0], w_tx_parity})          |
    | 278  |       |                                     != G_PARITY_TYPE)                                               |
    | 279  |       |                                     o_rx_error <= 1'b1;                                             |
    | 280  |       |                               // coverage on                                                        |
    | 281  |       |                             end                                                                     |
    | 282  |       |                         end                                                                         |
    | 283  |       |                     end                                                                             |
    | 284  |       |                 end                                                                                 |
    | 285  |       |                 default : begin                                                                     |
    | 286  |   1   |                     o_rx_busy <= 1'b1;                                                              |
    | 287  |   1   |                     o_rx_error <= 1'b0;                                                             |
    | 288  |   1   |                     w_rx_data <= 0;                                                                 |
    | 289  |   1   |                     state_rx <= IDLE_RX;                                                            |
    | 290  |       |                 end                                                                                 |
    | 291  |       |             endcase                                                                                 |
    ======================================================================================================================


    BRANCH COVERAGE
    ================================
    |      Source: design.sv       |
    ================================
    | Branch/Line          | Hits  |
    ================================
    | IF branch#154#1#     |   2/2 |
    |     if_branch        |     1 |
    |     else_branch      | 99891 |
    |----------------------|-------|
    | IF branch#160#1#     |   2/2 |
    |     if_branch        | 99250 |
    |     else_branch      |   641 |
    |----------------------|-------|
    | IF branch#169#1#     |   2/2 |
    |     if_branch        | 88792 |
    |     else_branch      | 11099 |
    |----------------------|-------|
    | IF branch#180#1#     |   2/2 |
    |     if_branch        |     1 |
    |     else_branch      | 99891 |
    |----------------------|-------|
    | CASE branch#187#1#   |   3/3 |
    |     true#188#1#      | 12934 |
    |     true#197#1#      | 86956 |
    |     true#213#1#      |     1 |
    |----------------------|-------|
    | IF branch#190#1#     |   2/2 |
    |     if_branch        |    64 |
    |     all_false_branch | 12870 |
    |----------------------|-------|
    | IF branch#198#1#     |   2/2 |
    |     if_branch        |   576 |
    |     all_false_branch | 86380 |
    |----------------------|-------|
    | IF branch#201#1#     |   2/2 |
    |     if_branch        |   512 |
    |     else_branch      |    64 |
    |----------------------|-------|
    | IF branch#228#1#     |   2/2 |
    |     if_branch        |     1 |
    |     else_branch      | 99891 |
    |----------------------|-------|
    | CASE branch#237#1#   |   3/3 |
    |     true#238#1#      | 11762 |
    |     true#257#1#      | 88128 |
    |     true#285#1#      |     1 |
    |----------------------|-------|
    | IF branch#239#1#     |   2/2 |
    |     if_branch        |  1306 |
    |     all_false_branch | 10456 |
    |----------------------|-------|
    | IF branch#240#1#     |   2/2 |
    |     if_branch        |   512 |
    |     else_branch      |   794 |
    |----------------------|-------|
    | IF branch#241#1#     |   2/2 |
    |     if_branch        |   448 |
    |     else_branch      |    64 |
    |----------------------|-------|
    | IF branch#260#1#     |   2/2 |
    |     if_branch        |  9792 |
    |     all_false_branch | 78336 |
    |----------------------|-------|
    | IF branch#261#1#     |   2/2 |
    |     if_branch        |  9216 |
    |     else_branch      |   576 |
    |----------------------|-------|
    | IF branch#265#1#     |   2/2 |
    |     if_branch        |   512 |
    |     else_branch      |    64 |
    ================================


    ASSERTION COVERAGE
    =====================================================
    |      Name      |     Source     | Failed | Passed |
    |----------------|----------------|--------|--------|
    | check_rx_error | design.sv(295) |      0 |      2 |
    =====================================================


    COVER COVERAGE
    ===========================================
    |      Name      |     Source     | Hits  |
    |----------------|----------------|-------|
    | cover_state_TX | design.sv(296) |    64 |
    | cover_state_RX | design.sv(297) | 11436 |
    ===========================================


MODULE - work.parity


    SUMMARY
    ============================================
    |   Coverage Type    | Weight | Hits/Total |
    ============================================
    | Statement Coverage |      1 |   100.000% |
    |--------------------|--------|------------|
    | Statements         |        |      2 / 2 |
    | Subprograms        |        |      0 / 0 |
    ============================================
    WEIGHTED AVERAGE: 100.000%


    STATEMENT COVERAGE
    =====================================================================
    | Line | Hits |                  Source: design.sv                  |
    |------|------|-----------------------------------------------------|
    | 16   |      |     always_comb begin : calc_parity                 |
    | 17   |      |         logic data_parity;                          |
    | 18   |  66  |         data_parity = ^(i_data);                    |
    | 19   |  66  |         o_parity_bit = G_PARITY_TYPE ^ data_parity; |
    | 20   |      |     end                                             |
    | 21   |      |                                                     |
    =====================================================================


CLASS - work.testbench_pkg/\testbench_pkg rand_sequence \


    SUMMARY
    =============================================
    |    Coverage Type    | Weight | Hits/Total |
    =============================================
    | Statement Coverage  |      1 |    46.875% |
    |---------------------|--------|------------|
    | Statements          |        |    15 / 32 |
    | Subprograms         |        |      3 / 8 |
    =============================================
    | Branch Coverage     |      1 |     0.000% |
    |---------------------|--------|------------|
    | Branch paths        |        |     0 / 12 |
    | Branches            |        |      0 / 6 |
    =============================================
    | Covergroup Coverage |      1 |   100.000% |
    |---------------------|--------|------------|
    | Types               |        |      1 / 1 |
    =============================================
    | Assertion Coverage  |      1 |   100.000% |
    |---------------------|--------|------------|
    | Assertions          |        |      2 / 2 |
    =============================================
    WEIGHTED AVERAGE: 61.718%


    STATEMENT COVERAGE
    ===========================================================================================================================================================================
    | Line |                           Hits                            |                                         Source: sequence.sv                                          |
    |------|-----------------------------------------------------------|------------------------------------------------------------------------------------------------------|
    | 1    |                                                           | import pkg::*;                                                                                       |
    | 2    |                                                           | class rand_sequence extends uvm_sequence;                                                            |
    | 3    | UNR,UNR,UNR,UNR,UNR,UNR,1,UNR,UNR,UNR,UNR,UNR,UNR,UNR,UNR |   `uvm_object_utils(rand_sequence)                                                                   |
    | 4    |                                                           |                                                                                                      |
    | 5    |                                                           |   sequence_item #(G_WORD_WIDTH) sa_tx;                                                               |
    | 6    |                                                           |   covergroup cg;                                                                                     |
    | 7    |                                                           |     option.per_instance = 1;                                                                         |
    | 8    |                                                           |     data:   coverpoint sa_tx.i_data{                                                                 |
    | 9    |                                                           |       bins range_data[] = {[0:$]};                                                                   |
    | 10   |                                                           |     }                                                                                                |
    | 11   |                                                           |   endgroup: cg                                                                                       |
    | 12   |                                                           |                                                                                                      |
    | 13   |                                                           |   function new(string name = "");                                                                    |
    | 14   |                             1                             |     super.new(name);                                                                                 |
    | 15   |                             1                             |     cg = new();                                                                                      |
    | 16   |                                                           |   endfunction                                                                                        |
    | 17   |                                                           |                                                                                                      |
    | 18   |                                                           |   task body();                                                                                       |
    | 19   |                                                           |     real cvg = 0;                                                                                    |
    | 20   |                                                           |                                                                                                      |
    | 21   |                           1,64                            |     while(cg.get_coverage != 100.0) begin                                                            |
    | 22   |                            64                             |       sa_tx = sequence_item #(G_WORD_WIDTH)::type_id::create("sa_tx");                               |
    | 23   |                                                           |                                                                                                      |
    | 24   |                            64                             |       cvg = cg.get_coverage();                                                                       |
    | 25   |                            64                             |       assert(sa_tx.randomize());                                                                     |
    | 26   |                            64                             |       cg.sample();                                                                                   |
    | 27   |                          64,187                           |       while (cg.get_coverage() == cvg) begin                                                         |
    | 28   |                            187                            |         assert(sa_tx.randomize());                                                                   |
    | 29   |                            187                            |         cg.sample();                                                                                 |
    | 30   |                                                           |       end                                                                                            |
    | 31   |                            64                             |       start_item(sa_tx);                                                                             |
    | 32   |                            64                             |       finish_item(sa_tx);                                                                            |
    | 33   |                                                           | //       `uvm_info(get_type_name(), $sformatf("Current Coverage = %0f", cg.get_coverage()), UVM_LOW) |
    | 34   |                                                           |     end                                                                                              |
    | 35   |                                                           |   endtask                                                                                            |
    | 36   |                                                           |                                                                                                      |
    | 37   |                                                           |   function void report_phase(uvm_phase phase);                                                       |
    | 38   |                        UNR,UNR,UNR                        |     `uvm_info(get_type_name(), $sformatf("Current Coverage = %0f", cg.get_coverage()), UVM_LOW)      |
    | 39   |                                                           |   endfunction: report_phase                                                                          |
    | 40   |                                                           |                                                                                                      |
    ===========================================================================================================================================================================


    BRANCH COVERAGE
    ===============================
    |     Source: sequence.sv     |
    ===============================
    | Branch/Line          | Hits |
    ===============================
    | IF branch#3#1#       |  0/2 |
    |     if_branch        |    0 |
    |     else_branch      |    0 |
    |----------------------|------|
    | IF branch#3#2#       |  0/2 |
    |     if_branch        |    0 |
    |     all_false_branch |    0 |
    |----------------------|------|
    | IF branch#3#3#       |  0/2 |
    |     if_branch        |    0 |
    |     else_branch      |    0 |
    |----------------------|------|
    | IF branch#3#4#       |  0/2 |
    |     if_branch        |    0 |
    |     all_false_branch |    0 |
    |----------------------|------|
    | IF branch#3#5#       |  0/2 |
    |     if_branch        |    0 |
    |     all_false_branch |    0 |
    |----------------------|------|
    | IF branch#38#1#      |  0/2 |
    |     if_branch        |    0 |
    |     all_false_branch |    0 |
    ===============================


    COVERGROUP COVERAGE
    ==================================================================================
    |                   Covergroup                   |   Hits   |  Goal /  | Status  |
    |                                                |          | At Least |         |
    ==================================================================================
    | TYPE /\package testbench_pkg\/rand_sequence/cg | 100.000% | 100.000% | Covered |
    ==================================================================================
    | INSTANCE <UNNAMED1>                            | 100.000% | 100.000% | Covered |
    |------------------------------------------------|----------|----------|---------|
    | COVERPOINT <UNNAMED1>::data                    | 100.000% | 100.000% | Covered |
    |------------------------------------------------|----------|----------|---------|
    | bin range_data[0]                              |        4 |        1 | Covered |
    | bin range_data[1]                              |        8 |        1 | Covered |
    | bin range_data[2]                              |        3 |        1 | Covered |
    | bin range_data[3]                              |        4 |        1 | Covered |
    | bin range_data[4]                              |        2 |        1 | Covered |
    | bin range_data[5]                              |        2 |        1 | Covered |
    | bin range_data[6]                              |        2 |        1 | Covered |
    | bin range_data[7]                              |        3 |        1 | Covered |
    | bin range_data[8]                              |        4 |        1 | Covered |
    | bin range_data[9]                              |        4 |        1 | Covered |
    | bin range_data[10]                             |        8 |        1 | Covered |
    | bin range_data[11]                             |        7 |        1 | Covered |
    | bin range_data[12]                             |        2 |        1 | Covered |
    | bin range_data[13]                             |        3 |        1 | Covered |
    | bin range_data[14]                             |        6 |        1 | Covered |
    | bin range_data[15]                             |        4 |        1 | Covered |
    | bin range_data[16]                             |        5 |        1 | Covered |
    | bin range_data[17]                             |        3 |        1 | Covered |
    | bin range_data[18]                             |        2 |        1 | Covered |
    | bin range_data[19]                             |        4 |        1 | Covered |
    | bin range_data[20]                             |        6 |        1 | Covered |
    | bin range_data[21]                             |        3 |        1 | Covered |
    | bin range_data[22]                             |        2 |        1 | Covered |
    | bin range_data[23]                             |        4 |        1 | Covered |
    | bin range_data[24]                             |        6 |        1 | Covered |
    | bin range_data[25]                             |        3 |        1 | Covered |
    | bin range_data[26]                             |        3 |        1 | Covered |
    | bin range_data[27]                             |        5 |        1 | Covered |
    | bin range_data[28]                             |        3 |        1 | Covered |
    | bin range_data[29]                             |        5 |        1 | Covered |
    | bin range_data[30]                             |        1 |        1 | Covered |
    | bin range_data[31]                             |        3 |        1 | Covered |
    | bin range_data[32]                             |        3 |        1 | Covered |
    | bin range_data[33]                             |        4 |        1 | Covered |
    | bin range_data[34]                             |        5 |        1 | Covered |
    | bin range_data[35]                             |        5 |        1 | Covered |
    | bin range_data[36]                             |        6 |        1 | Covered |
    | bin range_data[37]                             |        7 |        1 | Covered |
    | bin range_data[38]                             |        2 |        1 | Covered |
    | bin range_data[39]                             |        1 |        1 | Covered |
    | bin range_data[40]                             |        1 |        1 | Covered |
    | bin range_data[41]                             |        3 |        1 | Covered |
    | bin range_data[42]                             |        5 |        1 | Covered |
    | bin range_data[43]                             |        4 |        1 | Covered |
    | bin range_data[44]                             |        2 |        1 | Covered |
    | bin range_data[45]                             |        3 |        1 | Covered |
    | bin range_data[46]                             |        4 |        1 | Covered |
    | bin range_data[47]                             |        4 |        1 | Covered |
    | bin range_data[48]                             |        1 |        1 | Covered |
    | bin range_data[49]                             |        5 |        1 | Covered |
    | bin range_data[50]                             |        2 |        1 | Covered |
    | bin range_data[51]                             |        4 |        1 | Covered |
    | bin range_data[52]                             |        7 |        1 | Covered |
    | bin range_data[53]                             |        7 |        1 | Covered |
    | bin range_data[54]                             |        3 |        1 | Covered |
    | bin range_data[55]                             |        3 |        1 | Covered |
    | bin range_data[56]                             |        5 |        1 | Covered |
    | bin range_data[57]                             |        3 |        1 | Covered |
    | bin range_data[58]                             |        8 |        1 | Covered |
    | bin range_data[59]                             |        3 |        1 | Covered |
    | bin range_data[60]                             |        4 |        1 | Covered |
    | bin range_data[61]                             |        5 |        1 | Covered |
    | bin range_data[62]                             |        1 |        1 | Covered |
    | bin range_data[63]                             |        7 |        1 | Covered |
    ==================================================================================


    ASSERTION COVERAGE
    =======================================================
    |      Name       |     Source      | Failed | Passed |
    |-----------------|-----------------|--------|--------|
    | @IMM_ASSERT#25@ | sequence.sv(25) |      0 |     64 |
    | @IMM_ASSERT#28@ | sequence.sv(28) |      0 |    187 |
    =======================================================


CLASS - work.testbench_pkg/\testbench_pkg driver \


    SUMMARY
    ============================================
    |   Coverage Type    | Weight | Hits/Total |
    ============================================
    | Statement Coverage |      1 |    92.105% |
    |--------------------|--------|------------|
    | Statements         |        |    35 / 38 |
    | Subprograms        |        |      4 / 7 |
    ============================================
    | Branch Coverage    |      1 |   100.000% |
    |--------------------|--------|------------|
    | Branch paths       |        |      2 / 2 |
    | Branches           |        |      1 / 1 |
    ============================================
    WEIGHTED AVERAGE: 96.052%


    STATEMENT COVERAGE
    ===================================================================================================================================================================================================
    | Line |    Hits     |                                                                             Source: driver.sv                                                                              |
    |------|-------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | 1    |             | import pkg::*;                                                                                                                                                             |
    | 2    |             | class driver extends uvm_driver #(sequence_item #(pkg::G_WORD_WIDTH));                                                                                                     |
    | 3    | UNR,UNR,UNR |   `uvm_component_utils(driver)                                                                                                                                             |
    | 4    |             |                                                                                                                                                                            |
    | 5    |             |   virtual uart_intf intf;                                                                                                                                                  |
    | 6    |             |                                                                                                                                                                            |
    | 7    |             |   function new (string name = "", uvm_component parent);                                                                                                                   |
    | 8    |      1      |     super.new(name,parent);                                                                                                                                                |
    | 9    |             |   endfunction                                                                                                                                                              |
    | 10   |             |                                                                                                                                                                            |
    | 11   |             |   function void build_phase(uvm_phase phase);                                                                                                                              |
    | 12   |      1      |     super.build_phase(phase);                                                                                                                                              |
    | 13   |      1      |     void'(uvm_resource_db#(virtual uart_intf)::read_by_name(.scope("ifs"), .name("uart_intf"), .val(intf)));                                                               |
    | 14   |             |   endfunction                                                                                                                                                              |
    | 15   |             |                                                                                                                                                                            |
    | 16   |             |   virtual task reset_phase(uvm_phase phase);                                                                                                                               |
    | 17   |      1      |     phase.raise_objection(this);                                                                                                                                           |
    | 18   |      1      |     intf.i_rst = 1'b1;                                                                                                                                                     |
    | 19   |             |                                                                                                                                                                            |
    | 20   |      1      |     repeat(5)                                                                                                                                                              |
    | 21   |             |       @(posedge intf.i_clk)                                                                                                                                                |
    | 22   |      5      |     intf.i_rst = 1'b0;                                                                                                                                                     |
    | 23   |             |                                                                                                                                                                            |
    | 24   |      1      |     phase.drop_objection(this);                                                                                                                                            |
    | 25   |             |   endtask: reset_phase                                                                                                                                                     |
    | 26   |             |                                                                                                                                                                            |
    | 27   |             |                                                                                                                                                                            |
    | 28   |             |   virtual task run_phase(uvm_phase phase);                                                                                                                                 |
    | 29   |             |     sequence_item #(pkg::G_WORD_WIDTH) req_item;                                                                                                                           |
    | 30   |             |                                                                                                                                                                            |
    | 31   |      1      |     forever begin                                                                                                                                                          |
    | 32   |     67      |       if(!intf.i_rst) begin                                                                                                                                                |
    | 33   |     65      |           seq_item_port.get_next_item(req_item);                                                                                                                           |
    | 34   |     64      |           intf.i_we = 1;                                                                                                                                                   |
    | 35   |     64      |         intf.i_stb = 1;                                                                                                                                                    |
    | 36   |     64      |         intf.i_addr = 0;                                                                                                                                                   |
    | 37   |     64      |         intf.i_data = req_item.i_data;                                                                                                                                     |
    | 38   |     64      |         @(posedge intf.i_clk);                                                                                                                                             |
    | 39   |             |                                                                                                                                                                            |
    | 40   |             |                                                                                                                                                                            |
    | 41   |     64      |         intf.i_we = 1;                                                                                                                                                     |
    | 42   |     64      |         intf.i_stb = 0;                                                                                                                                                    |
    | 43   |     64      |         intf.i_addr = 0;                                                                                                                                                   |
    | 44   |     64      |         intf.i_data = req_item.i_data;                                                                                                                                     |
    | 45   |     64      |         @(posedge intf.i_clk);                                                                                                                                             |
    | 46   |             |                                                                                                                                                                            |
    | 47   |  64,99692   |         while(!(!intf.o_rx_busy && intf.f_rx_busy_prev)) begin                                                                                                             |
    | 48   |             | //           `uvm_info(get_type_name(),$sformatf("DRIVER rx_busy=0x%0h rx_busy_prev=0x%oh",intf.o_rx_busy,intf.f_rx_busy_prev),UVM_LOW)                                    |
    | 49   |             |                                                                                                                                                                            |
    | 50   |             | //           `uvm_info(get_type_name(),$sformatf("DRIVER we=0x%0h stb=0x%oh, addr=0x%oh, o_data_valid =0x%oh",intf.i_we,intf.i_stb,intf.i_addr,intf.o_data_valid),UVM_LOW) |
    | 51   |    99692    |           intf.i_we = 1;                                                                                                                                                   |
    | 52   |    99692    |           intf.i_stb = 0;                                                                                                                                                  |
    | 53   |    99692    |           intf.i_addr = 0;                                                                                                                                                 |
    | 54   |    99692    |           intf.i_data = req_item.i_data;                                                                                                                                   |
    | 55   |    99692    |           @(posedge intf.i_clk);                                                                                                                                           |
    | 56   |             |         end                                                                                                                                                                |
    | 57   |             |                                                                                                                                                                            |
    | 58   |     64      |         intf.i_we = 0;                                                                                                                                                     |
    | 59   |     64      |         intf.i_stb = 1;                                                                                                                                                    |
    | 60   |     64      |         intf.i_addr = 1;                                                                                                                                                   |
    | 61   |     64      |         intf.i_data = req_item.i_data;                                                                                                                                     |
    | 62   |     64      |         @(posedge intf.i_clk);                                                                                                                                             |
    | 63   |             |                                                                                                                                                                            |
    | 64   |     64      |           seq_item_port.item_done();                                                                                                                                       |
    | 65   |             |       end else                                                                                                                                                             |
    | 66   |      2      |         @(posedge intf.i_clk);                                                                                                                                             |
    | 67   |             |     end                                                                                                                                                                    |
    | 68   |             |   endtask                                                                                                                                                                  |
    ===================================================================================================================================================================================================


    BRANCH COVERAGE
    ==========================
    |   Source: driver.sv    |
    ==========================
    | Branch/Line     | Hits |
    ==========================
    | IF branch#32#1# |  2/2 |
    |     if_branch   |   65 |
    |     else_branch |    2 |
    ==========================


CLASS - work.testbench_pkg/\testbench_pkg monitor_in \


    SUMMARY
    ============================================
    |   Coverage Type    | Weight | Hits/Total |
    ============================================
    | Statement Coverage |      1 |    78.571% |
    |--------------------|--------|------------|
    | Statements         |        |    11 / 14 |
    | Subprograms        |        |      3 / 6 |
    ============================================
    | Branch Coverage    |      1 |   100.000% |
    |--------------------|--------|------------|
    | Branch paths       |        |      2 / 2 |
    | Branches           |        |      1 / 1 |
    ============================================
    WEIGHTED AVERAGE: 89.285%


    STATEMENT COVERAGE
    =====================================================================================================================================
    | Line |    Hits     |                                              Source: monitor.sv                                              |
    |------|-------------|--------------------------------------------------------------------------------------------------------------|
    | 1    |             | import pkg::*;                                                                                               |
    | 2    |             | class monitor_in extends uvm_monitor;                                                                        |
    | 3    | UNR,UNR,UNR |   `uvm_component_utils(monitor_in)                                                                           |
    | 4    |             |                                                                                                              |
    | 5    |             |   uvm_analysis_port #(sequence_item #(G_WORD_WIDTH)) mon_in;                                                 |
    | 6    |             |   sequence_item #(G_WORD_WIDTH) datum;                                                                       |
    | 7    |             |   virtual uart_intf intf;                                                                                    |
    | 8    |             |                                                                                                              |
    | 9    |             |   function new (string name = "", uvm_component parent);                                                     |
    | 10   |      1      |     super.new(name,parent);                                                                                  |
    | 11   |             |   endfunction : new                                                                                          |
    | 12   |             |                                                                                                              |
    | 13   |             |                                                                                                              |
    | 14   |             |   function void build_phase(uvm_phase phase);                                                                |
    | 15   |      1      |     super.build_phase(phase);                                                                                |
    | 16   |      1      |     void'(uvm_resource_db#(virtual uart_intf)::read_by_name(.scope("ifs"), .name("uart_intf"), .val(intf))); |
    | 17   |             |                                                                                                              |
    | 18   |             |                                                                                                              |
    | 19   |      1      |     mon_in = new ("mon_in",this);                                                                            |
    | 20   |             |   endfunction: build_phase                                                                                   |
    | 21   |             |                                                                                                              |
    | 22   |             |   virtual task run_phase(uvm_phase phase);                                                                   |
    | 23   |      1      |     forever begin                                                                                            |
    | 24   |    99892    |       if(intf.i_we && intf.i_stb && intf.i_addr == 0) begin                                                  |
    | 25   |     64      |         datum = sequence_item #(G_WORD_WIDTH)::type_id::create("datum",this);                                |
    | 26   |     64      |         datum.i_data = intf.i_data;                                                                          |
    | 27   |             | //         `uvm_info(get_type_name(),$sformatf("MONITOR IN  i_data=0x%0h",datum.i_data),UVM_LOW)             |
    | 28   |     64      |         mon_in.write(datum);                                                                                 |
    | 29   |     64      |         @(posedge intf.i_clk);                                                                               |
    | 30   |             |       end else                                                                                               |
    | 31   |    99828    |         @(posedge intf.i_clk);                                                                               |
    | 32   |             |     end                                                                                                      |
    | 33   |             |   endtask : run_phase                                                                                        |
    =====================================================================================================================================


    BRANCH COVERAGE
    ===========================
    |   Source: monitor.sv    |
    ===========================
    | Branch/Line     | Hits  |
    ===========================
    | IF branch#24#1# |   2/2 |
    |     if_branch   |    64 |
    |     else_branch | 99828 |
    ===========================


CLASS - work.testbench_pkg/\testbench_pkg monitor_out \


    SUMMARY
    ============================================
    |   Coverage Type    | Weight | Hits/Total |
    ============================================
    | Statement Coverage |      1 |    78.571% |
    |--------------------|--------|------------|
    | Statements         |        |    11 / 14 |
    | Subprograms        |        |      3 / 6 |
    ============================================
    | Branch Coverage    |      1 |   100.000% |
    |--------------------|--------|------------|
    | Branch paths       |        |      2 / 2 |
    | Branches           |        |      1 / 1 |
    ============================================
    WEIGHTED AVERAGE: 89.285%


    STATEMENT COVERAGE
    =====================================================================================================================================
    | Line |    Hits     |                                            Source: monitor_out.sv                                            |
    |------|-------------|--------------------------------------------------------------------------------------------------------------|
    | 1    |             | import pkg::*;                                                                                               |
    | 2    |             | class monitor_out extends uvm_monitor;                                                                       |
    | 3    | UNR,UNR,UNR |   `uvm_component_utils(monitor_out)                                                                          |
    | 4    |             |                                                                                                              |
    | 5    |             |   uvm_analysis_port #(sequence_item #(G_WORD_WIDTH)) mon_out;                                                |
    | 6    |             |   virtual uart_intf intf;                                                                                    |
    | 7    |             |   sequence_item #(G_WORD_WIDTH) datum;                                                                       |
    | 8    |             |                                                                                                              |
    | 9    |             |   function new (string name = "", uvm_component parent);                                                     |
    | 10   |      1      |     super.new(name,parent);                                                                                  |
    | 11   |             |   endfunction : new                                                                                          |
    | 12   |             |                                                                                                              |
    | 13   |             |                                                                                                              |
    | 14   |             |   function void build_phase(uvm_phase phase);                                                                |
    | 15   |      1      |     super.build_phase(phase);                                                                                |
    | 16   |      1      |     void'(uvm_resource_db#(virtual uart_intf)::read_by_name(.scope("ifs"), .name("uart_intf"), .val(intf))); |
    | 17   |             |                                                                                                              |
    | 18   |      1      |     mon_out = new ("mon_out",this);                                                                          |
    | 19   |             |   endfunction: build_phase                                                                                   |
    | 20   |             |                                                                                                              |
    | 21   |             |   virtual task run_phase(uvm_phase phase);                                                                   |
    | 22   |             |                                                                                                              |
    | 23   |      1      |     forever begin                                                                                            |
    | 24   |    99892    |       if(!intf.i_we && intf.i_stb && intf.i_addr == 1) begin                                                 |
    | 25   |     69      |         datum = sequence_item #(G_WORD_WIDTH)::type_id::create("datum",this);                                |
    | 26   |     69      |         @(posedge intf.i_clk);                                                                               |
    | 27   |     68      |         datum.o_data = intf.o_data;                                                                          |
    | 28   |             | //         `uvm_info(get_type_name(),$sformatf("MONITOR OUT  o_data=0x%0h",datum.o_data),UVM_LOW)            |
    | 29   |     68      |         mon_out.write(datum);                                                                                |
    | 30   |             |       end else                                                                                               |
    | 31   |    99823    |         @(posedge intf.i_clk);                                                                               |
    | 32   |             |     end                                                                                                      |
    | 33   |             |   endtask : run_phase                                                                                        |
    =====================================================================================================================================


    BRANCH COVERAGE
    =============================
    |  Source: monitor_out.sv   |
    =============================
    | Branch/Line     |  Hits   |
    =============================
    | IF branch#24#1# |     2/2 |
    |     if_branch   |      69 |
    |     else_branch |   99823 |
    =============================


CLASS - work.testbench_pkg/\testbench_pkg scoreboard \


    SUMMARY
    ============================================
    |   Coverage Type    | Weight | Hits/Total |
    ============================================
    | Statement Coverage |      1 |    83.870% |
    |--------------------|--------|------------|
    | Statements         |        |    26 / 31 |
    | Subprograms        |        |      4 / 7 |
    ============================================
    | Branch Coverage    |      1 |    50.000% |
    |--------------------|--------|------------|
    | Branch paths       |        |     5 / 10 |
    | Branches           |        |      1 / 5 |
    ============================================
    WEIGHTED AVERAGE: 66.935%


    STATEMENT COVERAGE
    ======================================================================================================================================
    | Line |    Hits     |                                             Source: scoreboard.sv                                             |
    |------|-------------|---------------------------------------------------------------------------------------------------------------|
    | 1    |             | import pkg::*;                                                                                                |
    | 2    |             | class scoreboard extends uvm_scoreboard;                                                                      |
    | 3    | UNR,UNR,264 |   `uvm_component_utils(scoreboard)                                                                            |
    | 4    |             |                                                                                                               |
    | 5    |             |   function new(string name = "", uvm_component parent);                                                       |
    | 6    |      1      |     super.new(name,parent);                                                                                   |
    | 7    |             |   endfunction : new                                                                                           |
    | 8    |             |                                                                                                               |
    | 9    |             |   uvm_tlm_analysis_fifo #(sequence_item #(G_WORD_WIDTH)) fifo_in;                                             |
    | 10   |             |   uvm_tlm_analysis_fifo #(sequence_item #(G_WORD_WIDTH)) fifo_out;                                            |
    | 11   |             |                                                                                                               |
    | 12   |             |   uvm_get_port #(sequence_item #(G_WORD_WIDTH)) data_get_port;                                                |
    | 13   |             |   uvm_get_port #(sequence_item #(G_WORD_WIDTH)) result_get_port;                                              |
    | 14   |             |                                                                                                               |
    | 15   |             |   sequence_item #(G_WORD_WIDTH) in;                                                                           |
    | 16   |             |   sequence_item #(G_WORD_WIDTH) out;                                                                          |
    | 17   |             |                                                                                                               |
    | 18   |             |   function void build_phase (uvm_phase phase);                                                                |
    | 19   |      1      |     super.build_phase(phase);                                                                                 |
    | 20   |             |                                                                                                               |
    | 21   |      1      |     fifo_in = new("fifo_in",this);                                                                            |
    | 22   |      1      |     fifo_out = new("fifo_out",this);                                                                          |
    | 23   |             |                                                                                                               |
    | 24   |      1      |     data_get_port = new("data_get_port",this);                                                                |
    | 25   |      1      |     result_get_port = new("result_get_port",this);                                                            |
    | 26   |             |   endfunction : build_phase                                                                                   |
    | 27   |             |                                                                                                               |
    | 28   |             |   function void connect_phase(uvm_phase phase);                                                               |
    | 29   |      1      |     super.connect_phase(phase);                                                                               |
    | 30   |      1      |     data_get_port.connect(fifo_in.get_export);                                                                |
    | 31   |      1      |     result_get_port.connect(fifo_out.get_export);                                                             |
    | 32   |             |   endfunction : connect_phase                                                                                 |
    | 33   |             |                                                                                                               |
    | 34   |             |   function void check_phase(uvm_phase phase);                                                                 |
    | 35   |             |     int cnt_items = 0;                                                                                        |
    | 36   |      1      |     super.check_phase(phase);                                                                                 |
    | 37   |             |                                                                                                               |
    | 38   |    1,68     |     while(result_get_port.can_get()) begin                                                                    |
    | 39   |     68      |       in  = sequence_item #(G_WORD_WIDTH)::type_id::create("in",this);                                        |
    | 40   |     68      |       out = sequence_item #(G_WORD_WIDTH)::type_id::create("out",this);                                       |
    | 41   |             |                                                                                                               |
    | 42   |     68      |       result_get_port.try_get(out);                                                                           |
    | 43   |     68      |       data_get_port.try_get(in);                                                                              |
    | 44   |             |                                                                                                               |
    | 45   |     68      |       cnt_items ++;                                                                                           |
    | 46   |  68,68,68   |       `uvm_info(get_type_name(),$sformatf("cnt items = 0x%0h",cnt_items),UVM_LOW)                             |
    | 47   |     68      |       if(in != null && out !=null) begin                                                                      |
    | 48   |     64      |         if(in.i_data != out.o_data)                                                                           |
    | 49   |    0,0,0    |           `uvm_error(get_type_name(),$sformatf("FAIL i_data=0x%0h, o_data=0x%0h",in.i_data,out.o_data))       |
    | 50   |             |         else                                                                                                  |
    | 51   |  64,64,64   |           `uvm_info(get_type_name(),$sformatf("PASS i_data=0x%0h,o_data=0x%0h",in.i_data,out.o_data),UVM_LOW) |
    | 52   |             |       end                                                                                                     |
    | 53   |             |     end                                                                                                       |
    ======================================================================================================================================


    BRANCH COVERAGE
    ===============================
    |    Source: scoreboard.sv    |
    ===============================
    | Branch/Line          | Hits |
    ===============================
    | IF branch#46#1#      |  1/2 |
    |     if_branch        |   68 |
    |     all_false_branch |    0 |
    |----------------------|------|
    | IF branch#47#1#      |  2/2 |
    |     if_branch        |   64 |
    |     all_false_branch |    4 |
    |----------------------|------|
    | IF branch#48#1#      |  1/2 |
    |     if_branch        |    0 |
    |     else_branch      |   64 |
    |----------------------|------|
    | IF branch#49#1#      |  0/2 |
    |     if_branch        |    0 |
    |     all_false_branch |    0 |
    |----------------------|------|
    | IF branch#51#1#      |  1/2 |
    |     if_branch        |   64 |
    |     all_false_branch |    0 |
    ===============================


CLASS - work.testbench_pkg/\testbench_pkg env \


    SUMMARY
    ============================================
    |   Coverage Type    | Weight | Hits/Total |
    ============================================
    | Statement Coverage |      1 |    78.571% |
    |--------------------|--------|------------|
    | Statements         |        |    11 / 14 |
    | Subprograms        |        |      3 / 6 |
    ============================================
    WEIGHTED AVERAGE: 78.571%


    STATEMENT COVERAGE
    =================================================================================================================
    | Line |    Hits     |                                      Source: env.sv                                      |
    |------|-------------|------------------------------------------------------------------------------------------|
    | 1    |             | import pkg::*;                                                                           |
    | 2    |             | class env extends uvm_env;                                                               |
    | 3    | UNR,UNR,UNR |   `uvm_component_utils(env)                                                              |
    | 4    |             |                                                                                          |
    | 5    |             |   uvm_sequencer #(sequence_item #(G_WORD_WIDTH)) seqr;                                   |
    | 6    |             |   driver drv;                                                                            |
    | 7    |             |   monitor_out res_mon;                                                                   |
    | 8    |             |   monitor_in data_mon;                                                                   |
    | 9    |             |   scoreboard scb;                                                                        |
    | 10   |             |                                                                                          |
    | 11   |             |   function new (string name = "", uvm_component parent);                                 |
    | 12   |      1      |     super.new(name,parent);                                                              |
    | 13   |             |   endfunction : new                                                                      |
    | 14   |             |                                                                                          |
    | 15   |             |   function void build_phase(uvm_phase phase);                                            |
    | 16   |      1      |     super.build_phase(phase);                                                            |
    | 17   |      1      |     seqr = uvm_sequencer #(sequence_item #(G_WORD_WIDTH))::type_id::create("seqr",this); |
    | 18   |             |                                                                                          |
    | 19   |      1      |     drv = driver::type_id::create("drv",this);                                           |
    | 20   |      1      |     res_mon = monitor_out::type_id::create("res_mon",this);                              |
    | 21   |      1      |     data_mon = monitor_in::type_id::create("data_mon",this);                             |
    | 22   |      1      |     scb = scoreboard::type_id::create("scb",this);                                       |
    | 23   |             |   endfunction : build_phase                                                              |
    | 24   |             |                                                                                          |
    | 25   |             |   function void connect_phase(uvm_phase phase);                                          |
    | 26   |      1      |     super.connect_phase(phase);                                                          |
    | 27   |      1      |     drv.seq_item_port.connect(seqr.seq_item_export);                                     |
    | 28   |      1      |     data_mon.mon_in.connect(scb.fifo_in.analysis_export);                                |
    | 29   |      1      |     res_mon.mon_out.connect(scb.fifo_out.analysis_export);                               |
    | 30   |             |   endfunction : connect_phase                                                            |
    | 31   |             |                                                                                          |
    =================================================================================================================


CLASS - work.testbench_pkg/\testbench_pkg test \


    SUMMARY
    ============================================
    |   Coverage Type    | Weight | Hits/Total |
    ============================================
    | Statement Coverage |      1 |    81.818% |
    |--------------------|--------|------------|
    | Statements         |        |     9 / 11 |
    | Subprograms        |        |      4 / 6 |
    ============================================
    WEIGHTED AVERAGE: 81.818%


    STATEMENT COVERAGE
    ===============================================================================
    | Line |   Hits    |                     Source: test.sv                      |
    |------|-----------|----------------------------------------------------------|
    | 1    |           | class test extends uvm_test;                             |
    | 2    | UNR,UNR,1 |   `uvm_component_utils(test)                             |
    | 3    |           |                                                          |
    | 4    |           |   env environment;                                       |
    | 5    |           |   rand_sequence seq;                                     |
    | 6    |           |                                                          |
    | 7    |           |                                                          |
    | 8    |           |   function new (string name = "", uvm_component parent); |
    | 9    |     1     |     super.new(name,parent);                              |
    | 10   |           |   endfunction : new                                      |
    | 11   |           |                                                          |
    | 12   |           |                                                          |
    | 13   |           |   function void build_phase(uvm_phase phase);            |
    | 14   |     1     |     super.build_phase(phase);                            |
    | 15   |     1     |     environment = env::type_id::create("env",this);      |
    | 16   |           |   endfunction : build_phase                              |
    | 17   |           |                                                          |
    | 18   |           |   task run_phase(uvm_phase phase);                       |
    | 19   |     1     |     seq = rand_sequence::type_id::create("seq",this);    |
    | 20   |     1     |     phase.raise_objection(this);                         |
    | 21   |     1     |     seq.start(environment.seqr);                         |
    | 22   |           |                                                          |
    | 23   |     1     |     phase.phase_done.set_drain_time(this, 50ns);         |
    | 24   |     1     |     phase.drop_objection(this);                          |
    | 25   |           |                                                          |
    | 26   |           |   endtask : run_phase                                    |
    ===============================================================================


CLASS - work.testbench_pkg/\testbench_pkg sequence_item \


    SUMMARY
    ============================================
    |   Coverage Type    | Weight | Hits/Total |
    ============================================
    | Statement Coverage |      1 |    12.500% |
    |--------------------|--------|------------|
    | Statements         |        |     2 / 16 |
    | Subprograms        |        |      2 / 6 |
    ============================================
    | Branch Coverage    |      1 |     0.000% |
    |--------------------|--------|------------|
    | Branch paths       |        |     0 / 10 |
    | Branches           |        |      0 / 5 |
    ============================================
    WEIGHTED AVERAGE: 6.250%


    STATEMENT COVERAGE
    ========================================================================================================================================================
    | Line |                            Hits                            |                             Source: sequence_item.sv                             |
    |------|------------------------------------------------------------|----------------------------------------------------------------------------------|
    | 1    |                                                            | class sequence_item #(parameter int G_WORD_WIDTH = 4) extends uvm_sequence_item; |
    | 2    | UNR,UNR,UNR,UNR,UNR,UNR,64,UNR,UNR,UNR,UNR,UNR,UNR,UNR,UNR |   `uvm_object_utils(sequence_item #(G_WORD_WIDTH))                               |
    | 3    |                                                            |                                                                                  |
    | 4    |                                                            |   rand logic [G_WORD_WIDTH-1:0] i_data;                                          |
    | 5    |                                                            |   logic i_we;                                                                    |
    | 6    |                                                            |   logic i_stb;                                                                   |
    | 7    |                                                            |   logic i_addr;                                                                  |
    | 8    |                                                            |   logic [G_WORD_WIDTH-1:0] o_data;                                               |
    | 9    |                                                            |   logic o_rx_error;                                                              |
    | 10   |                                                            |                                                                                  |
    | 11   |                                                            |   function new(string name = "");                                                |
    | 12   |                            333                             |     super.new(name);                                                             |
    | 13   |                                                            |   endfunction : new                                                              |
    | 14   |                                                            |                                                                                  |
    ========================================================================================================================================================


    BRANCH COVERAGE
    ===============================
    |  Source: sequence_item.sv   |
    ===============================
    | Branch/Line          | Hits |
    ===============================
    | IF branch#2#1#       |  0/2 |
    |     if_branch        |    0 |
    |     else_branch      |    0 |
    |----------------------|------|
    | IF branch#2#2#       |  0/2 |
    |     if_branch        |    0 |
    |     all_false_branch |    0 |
    |----------------------|------|
    | IF branch#2#3#       |  0/2 |
    |     if_branch        |    0 |
    |     else_branch      |    0 |
    |----------------------|------|
    | IF branch#2#4#       |  0/2 |
    |     if_branch        |    0 |
    |     all_false_branch |    0 |
    |----------------------|------|
    | IF branch#2#5#       |  0/2 |
    |     if_branch        |    0 |
    |     all_false_branch |    0 |
    ===============================


